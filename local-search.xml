<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/02/21/05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E9%A6%96%E5%85%88%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA%E5%90%8C%E6%97%B6%E5%90%AF%E5%8A%A8%E7%9A%84-tomcat">1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></a></li><li><a href="#2-%E5%9C%A8-nginxconf-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE">2. <strong>在 nginx.conf 中进行配置</strong></a></li></ul><h1 id="1-首先准备两个同时启动的-Tomcat"><a href="#1-首先准备两个同时启动的-Tomcat" class="headerlink" title="1. 首先准备两个同时启动的 Tomcat"></a>1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></h1><h1 id="2-在-nginx-conf-中进行配置"><a href="#2-在-nginx-conf-中进行配置" class="headerlink" title="2. 在 nginx.conf 中进行配置"></a>2. <strong>在 nginx.conf 中进行配置</strong></h1><p><strong>在 nginx.conf 中进行配置</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521183833.png"></p><p>随着互联网信息的爆炸性增长，负载均衡（load balance）已经不再是一个很陌生的话题，顾名思义，负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎， nginx 就是其中的一个，在 linux 下有 Nginx、LVS、Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式(策略)：</p><p> <strong>1、轮询(默认)</strong></p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><p><strong>2、weight</strong></p><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多</p><p> 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184047.png"></p><p><strong>3、ip_hash</strong></p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。例如：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184132.png"></p><p><strong>4、fair（第三方）</strong></p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184224.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <url>/2021/02/21/06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">1. 什么是动静分离</a></li><li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 准备工作</a></li><li><a href="#3-%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE">3. 具体配置</a></li><li><a href="#4-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">4. 最终测试</a></li></ul><h1 id="1-什么是动静分离"><a href="#1-什么是动静分离" class="headerlink" title="1. 什么是动静分离"></a>1. 什么是动静分离</h1><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，</p><p><strong>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案</strong>；</p><p><strong>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开</strong>。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204548.png"></p><p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><p><strong>在 liunx 系统中准备静态资源，用于进行访问</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204736.png"></p><h1 id="3-具体配置"><a href="#3-具体配置" class="headerlink" title="3. 具体配置"></a>3. 具体配置</h1><p><strong>在</strong> <strong>nginx</strong> <strong>配置文件中进行配置</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204831.png"></p><h1 id="4-最终测试"><a href="#4-最终测试" class="headerlink" title="4. 最终测试"></a>4. 最终测试</h1><p><strong>浏览器中输入地址</strong> </p><p>http://服务器ip/image/01.jpg</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205251.png"></p><p><strong>因为配置文件</strong> <strong>autoindex on</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205456.png"></p><p><strong>在浏览器地址栏输入地址</strong></p><p>http://服务器ip/www/a.html</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205633.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/02/21/07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-keepalivednginx-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F">1. Keepalived+Nginx 高可用集群（主从模式）</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 配置高可用的准备工作</a></li><li><a href="#3-%E5%9C%A8%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85keepalived">3. 在两台服务器上安装keepalived</a></li><li><a href="#4-%E5%AE%8C%E6%88%90%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE">4. 完成高可用配置(主从配置)</a></li><li><a href="#5-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">5. 最终测试</a></li></ul><h1 id="1-Keepalived-Nginx-高可用集群（主从模式）"><a href="#1-Keepalived-Nginx-高可用集群（主从模式）" class="headerlink" title="1. Keepalived+Nginx 高可用集群（主从模式）"></a>1. Keepalived+Nginx 高可用集群（主从模式）</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521211609.png"></p><h1 id="2-配置高可用的准备工作"><a href="#2-配置高可用的准备工作" class="headerlink" title="2. 配置高可用的准备工作"></a>2. 配置高可用的准备工作</h1><ol><li>需要两台服务器</li><li>需要keepalived</li><li>需要虚拟ip</li></ol><h1 id="3-在两台服务器上安装keepalived"><a href="#3-在两台服务器上安装keepalived" class="headerlink" title="3. 在两台服务器上安装keepalived"></a>3. 在两台服务器上安装keepalived</h1><ol><li><p>使用yum命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install keepalived-v<br></code></pre></td></tr></table></figure></li><li><p>安装完成之后，在etc里面生成keepalived，有文件keepalived.conf</p></li></ol><h1 id="4-完成高可用配置-主从配置"><a href="#4-完成高可用配置-主从配置" class="headerlink" title="4. 完成高可用配置(主从配置)"></a>4. 完成高可用配置(主从配置)</h1><ol><li>修改<code>/etc/keepalived/keepalived.conf</code>配置文件</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">global_defs</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">notification_email</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">acassen@firewall.loc</span><br><br><span class="hljs-attr">failover@firewall.loc</span><br><br><span class="hljs-attr">sysadmin@firewall.loc</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">notification_email_from</span> <span class="hljs-string">Alexandre.Cassen@firewall.loc</span><br><br><span class="hljs-attr">smtp_server</span> <span class="hljs-string">192.168.17.129</span><br><br><span class="hljs-attr">smtp_connect_timeout</span> <span class="hljs-string">30</span><br><br><span class="hljs-attr">router_id</span> <span class="hljs-string">LVS_DEVEL</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">vrrp_script</span> <span class="hljs-string">chk_http_port &#123;</span><br><span class="hljs-attr">script</span> <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span><br><br><span class="hljs-attr">interval</span> <span class="hljs-string">2#（检测脚本执行的间隔）</span><br><br><span class="hljs-attr">weight</span> <span class="hljs-string">2</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">vrrp_instance</span> <span class="hljs-string">VI_1 &#123;</span><br><br><span class="hljs-attr">state</span> <span class="hljs-string">BACKUP# 备份服务器上将 MASTER 改为 BACKUP</span><br><br><span class="hljs-attr">interface</span> <span class="hljs-string">ens33//网卡</span><br><br><span class="hljs-attr">virtual_router_id</span> <span class="hljs-string">51# 主、备机的 virtual_router_id 必须相同</span><br><br><span class="hljs-attr">priority</span> <span class="hljs-string">100# 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><br><span class="hljs-attr">advert_int</span> <span class="hljs-string">1</span><br><br><span class="hljs-attr">authentication</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">auth_type</span> <span class="hljs-string">PASS</span><br><br><br><span class="hljs-attr">auth_pass</span> <span class="hljs-string">1111</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">virtual_ipaddress</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-meta">192.168.17.50</span> <span class="hljs-string">// VRRP H 虚拟地址</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">&#125;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>/usr/local/src</code>添加检测脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>A=`ps -C nginx –no-header |wc -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<br>    <span class="hljs-keyword">then</span> /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx<br>    sleep 2<br>    <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<br>    <span class="hljs-keyword">then</span> killall keepalived<br>    <span class="hljs-keyword">fi</span><br> <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ol start="3"><li>把两台服务器上nginx和keepalived启动</li></ol><p>启动nginx  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx<br></code></pre></td></tr></table></figure><p>启动keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start keepalived.service<br></code></pre></td></tr></table></figure><h1 id="5-最终测试"><a href="#5-最终测试" class="headerlink" title="5. 最终测试"></a>5. 最终测试</h1><ol><li>在浏览器地址栏输入虚拟地址ip 192.168.17.50</li></ol><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213142.png"></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213213.png"></p><ol start="2"><li>把主服务器(192.168.17.129) nginx和keepalived停止，在输入192.168.17.50</li></ol><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213341.png"></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213419.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/02/21/08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-master%E5%92%8Cworker">1. master和worker</a></li><li><a href="#2-worker%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%B7%A5%E4%BD%9C">2. worker如何进行工作</a></li><li><a href="#3-%E4%B8%80%E4%B8%AAmaster%E5%92%8C%E5%A4%9A%E4%B8%AAwoker%E6%9C%89%E5%A5%BD%E5%A4%84">3. 一个master和多个woker有好处</a></li><li><a href="#4-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E4%B8%AAworker%E5%90%88%E9%80%82">4. 设置多少个worker合适</a></li><li><a href="#5-%E8%BF%9E%E6%8E%A5%E6%95%B0worker_connection">5. 连接数worker_connection</a></li></ul><h1 id="1-master和worker"><a href="#1-master和worker" class="headerlink" title="1. master和worker"></a>1. master和worker</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205820.png"></p><h1 id="2-worker如何进行工作"><a href="#2-worker如何进行工作" class="headerlink" title="2. worker如何进行工作"></a>2. worker如何进行工作</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205949.png"></p><h1 id="3-一个master和多个woker有好处"><a href="#3-一个master和多个woker有好处" class="headerlink" title="3. 一个master和多个woker有好处"></a>3. 一个master和多个woker有好处</h1><p>首先，对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的 worker 进程。当然，worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p><ol><li>可以使用nginx –s reload热部署，利用nginx进行热部署操作</li><li>每个woker是独立的进程，如果有其中的一个woker出现问题，其他woker独立的，继续进行争抢，实现请求过程，不会造成服务中断</li></ol><h1 id="4-设置多少个worker合适"><a href="#4-设置多少个worker合适" class="headerlink" title="4. 设置多少个worker合适"></a>4. 设置多少个worker合适</h1><p>Nginx 同 redis 类似都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu 数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p><p>设置worker 数量: worker_processes 4     work 绑定 cpu(4 work 绑定 4cpu)。</p><h1 id="5-连接数worker-connection"><a href="#5-连接数worker-connection" class="headerlink" title="5. 连接数worker_connection"></a>5. 连接数worker_connection</h1><p>这个值是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 worker_connections * worker_processes。当然，这里说的是最大连接数，对于 HTTP 请 求 本 地 资 源来 说 ， 能 够 支 持 的 最大 并 发 数 量 是 worker_connections * worker_processes，如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是： worker_connections * worker_processes /2，而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections *worker_processes/4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><p>第一个：发送请求，占用了woker 的几个连接数？</p><p> 答案：2或者4个</p><p>第二个：nginx有一个master，有四个woker，每个woker支持最大的连接数1024，支持的最大并发数是多少？</p><p>普通的静态访问最大并发数是： worker_connections * worker_processes /2，</p><p>而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/4。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/README/"/>
    <url>/2021/02/21/README/</url>
    
    <content type="html"><![CDATA[<h1 id="01-Niginx简介"><a href="#01-Niginx简介" class="headerlink" title="01-Niginx简介"></a><a href="01-Nginx%E7%AE%80%E4%BB%8B.md">01-Niginx简介</a></h1><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx">1. 什么是nginx</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#2-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">2. 正向代理与反向代理</a><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#21-%E6%A6%82%E5%BF%B5">2.1 概念</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#22-%E5%8C%BA%E5%88%AB">2.2 区别</a><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80-%E4%BB%A3%E7%90%86-%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF">正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80%E4%BB%A3%E7%90%86-%E4%B8%80-%E6%9C%8D%E5%8A%A1%E7%AB%AF">反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</a></li></ul></li></ul></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#3-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">3. 负载均衡</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#4-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">4. 动静分离</a></li></ul><h1 id="02-Nginx的安装"><a href="#02-Nginx的安装" class="headerlink" title="02-Nginx的安装"></a><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md">02-Nginx的安装</a></h1><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%9F%BA%E4%BA%8Eapt%E6%BA%90%E5%AE%89%E8%A3%85">1. 基于apt源安装</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#11-%E5%AE%89%E8%A3%85">1.1 安装</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#12-%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">1.2 测试安装是否成功</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#13-%E5%8D%B8%E8%BD%BD">1.3 卸载</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%81%9C%E6%AD%A2nginx%E6%9C%8D%E5%8A%A1">1. 停止nginx服务</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E5%88%A0%E9%99%A4nginx-purge%E5%8C%85%E6%8B%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 删除nginx，-purge包括配置文件</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#3-%E7%A7%BB%E9%99%A4%E5%85%A8%E9%83%A8%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85">3. 移除全部不使用的软件包</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#4-%E7%BD%97%E5%88%97%E5%87%BA%E4%B8%8Enginx%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B9%B6%E5%88%A0%E9%99%A4">4. 罗列出与nginx相关的软件并删除</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#5-%E6%9F%A5%E7%9C%8Bnginx%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%A6%82%E6%9E%9C%E6%9C%89%E5%B0%B1kill%E6%8E%89">5. 查看nginx正在运行的进程，如果有就kill掉</a></li></ul></li></ul></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">2. 通过源码包编译安装</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96%E5%BA%93">1. 安装各种依赖库</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E5%AE%89%E8%A3%85nginx">2. 安装Nginx</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#3-%E9%85%8D%E7%BD%AE%E8%BD%AF%E9%93%BE%E6%8E%A5">3. 配置软链接</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#4-%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">4. 配置开机启动服务</a></li></ul></li></ul><h1 id="03-Nginx的常用命令和配置文件"><a href="#03-Nginx的常用命令和配置文件" class="headerlink" title="03-Nginx的常用命令和配置文件"></a><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md">03-Nginx的常用命令和配置文件</a></h1><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">1. 常用命令</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC">1. 查看版本</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-%E6%9F%A5%E7%9C%8B-nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">2. 查看 Nginx 配置语法的正确性</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#3-%E4%B8%BAnginx%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3. 为Nginx指定一个配置文件</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#4-%E5%90%AF%E5%8A%A8-nginx-%E6%9C%8D%E5%8A%A1">4. 启动 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#5-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8">5. 开机自启动</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#6-%E9%87%8D%E5%90%AF-nginx-%E6%9C%8D%E5%8A%A1">6. 重启 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#7-%E6%9F%A5%E7%9C%8B-nginx-%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81">7. 查看 Nginx 服务状态</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#8-%E9%87%8D%E8%BD%BD-nginx-%E6%9C%8D%E5%8A%A1">8. 重载 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#9-%E5%81%9C%E6%AD%A2-nginx-%E6%9C%8D%E5%8A%A1">9. 停止 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#10-%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9">10. 查看命令帮助</a></li></ul></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 配置文件</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%85%A8%E5%B1%80%E5%9D%97">第一部分：全局块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86events-%E5%9D%97">第二部分：events 块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86http-%E5%9D%97">第三部分：http 块</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-http%E5%85%A8%E5%B1%80%E5%9D%97">1. http全局块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-server%E5%9D%97">2. server块</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1%E5%85%A8%E5%B1%80-server-%E5%9D%97">1.全局 server 块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-location%E5%9D%97">2. location块</a></li></ul></li></ul></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#nginxconf-%E8%AF%A6%E7%BB%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D">nginx.conf 详细的配置文件介绍</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h1 id="04-Nginx配置实例-反向代理"><a href="#04-Nginx配置实例-反向代理" class="headerlink" title="04-Nginx配置实例-反向代理"></a><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.md">04-Nginx配置实例-反向代理</a></h1><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%B8%80">1. 反向代理实例一</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA-tomcat%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-1270018080%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2">1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0-host-%E6%96%87%E4%BB%B6%E5%B0%86-www123com-%E6%98%A0%E5%B0%84%E5%88%B0-127001">2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#3-%E5%9C%A8-nginxconf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A2%9E%E5%8A%A0%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE">3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></a></li></ul></li></ul></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%BA%8C">2. 反向代理实例二</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B-1">实现过程</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-tomcat%E4%B8%80%E4%B8%AA-8001-%E7%AB%AF%E5%8F%A3%E4%B8%80%E4%B8%AA-8002-%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%87%86%E5%A4%87%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E9%A1%B5%E9%9D%A2">1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E4%BF%AE%E6%94%B9-nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8-http-%E5%9D%97%E4%B8%AD%E6%B7%BB%E5%8A%A0-server">2. 修改 nginx 的配置文件在 http 块中添加 server{}</a></li></ul></li></ul></li></ul><h1 id="05-Nginx配置实例-负载均衡"><a href="#05-Nginx配置实例-负载均衡" class="headerlink" title="05-Nginx配置实例-负载均衡"></a><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.md">05-Nginx配置实例-负载均衡</a></h1><ul><li><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/#1-%E9%A6%96%E5%85%88%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA%E5%90%8C%E6%97%B6%E5%90%AF%E5%8A%A8%E7%9A%84-tomcat">1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></a></li><li><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/#2-%E5%9C%A8-nginxconf-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE">2. <strong>在 nginx.conf 中进行配置</strong></a></li></ul><h1 id="06-Nginx配置实例-动静分离"><a href="#06-Nginx配置实例-动静分离" class="headerlink" title="06-Nginx配置实例-动静分离"></a><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.md">06-Nginx配置实例-动静分离</a></h1><ul><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">1. 什么是动静分离</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 准备工作</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#3-%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE">3. 具体配置</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#4-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">4. 最终测试</a></li></ul><h1 id="07-Nginx搭建高可用集群"><a href="#07-Nginx搭建高可用集群" class="headerlink" title="07-Nginx搭建高可用集群"></a><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md">07-Nginx搭建高可用集群</a></h1><ul><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#1-keepalivednginx-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F">1. Keepalived+Nginx 高可用集群（主从模式）</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#2-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 配置高可用的准备工作</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#3-%E5%9C%A8%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85keepalived">3. 在两台服务器上安装keepalived</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#4-%E5%AE%8C%E6%88%90%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE">4. 完成高可用配置(主从配置)</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#5-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">5. 最终测试</a></li></ul><h1 id="08-Nginx原理及优化参数配置"><a href="#08-Nginx原理及优化参数配置" class="headerlink" title="08-Nginx原理及优化参数配置"></a><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md">08-Nginx原理及优化参数配置</a></h1><ul><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#1-master%E5%92%8Cworker">1. master和worker</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#2-worker%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%B7%A5%E4%BD%9C">2. worker如何进行工作</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#3-%E4%B8%80%E4%B8%AAmaster%E5%92%8C%E5%A4%9A%E4%B8%AAwoker%E6%9C%89%E5%A5%BD%E5%A4%84">3. 一个master和多个woker有好处</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#4-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E4%B8%AAworker%E5%90%88%E9%80%82">4. 设置多少个worker合适</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#5-%E8%BF%9E%E6%8E%A5%E6%95%B0worker_connection">5. 连接数worker_connection</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/02/21/Nginx/05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E9%A6%96%E5%85%88%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA%E5%90%8C%E6%97%B6%E5%90%AF%E5%8A%A8%E7%9A%84-tomcat">1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></a></li><li><a href="#2-%E5%9C%A8-nginxconf-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE">2. <strong>在 nginx.conf 中进行配置</strong></a></li></ul><h1 id="1-首先准备两个同时启动的-Tomcat"><a href="#1-首先准备两个同时启动的-Tomcat" class="headerlink" title="1. 首先准备两个同时启动的 Tomcat"></a>1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></h1><h1 id="2-在-nginx-conf-中进行配置"><a href="#2-在-nginx-conf-中进行配置" class="headerlink" title="2. 在 nginx.conf 中进行配置"></a>2. <strong>在 nginx.conf 中进行配置</strong></h1><p><strong>在 nginx.conf 中进行配置</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521183833.png"></p><p>随着互联网信息的爆炸性增长，负载均衡（load balance）已经不再是一个很陌生的话题，顾名思义，负载均衡即是将负载分摊到不同的服务单元，既保证服务的可用性，又保证响应足够快，给用户很好的体验。快速增长的访问量和数据流量催生了各式各样的负载均衡产品，很多专业的负载均衡硬件提供了很好的功能，但却价格不菲，这使得负载均衡软件大受欢迎， nginx 就是其中的一个，在 linux 下有 Nginx、LVS、Haproxy 等等服务可以提供负载均衡服务，而且 Nginx 提供了几种分配方式(策略)：</p><p> <strong>1、轮询(默认)</strong></p><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><p><strong>2、weight</strong></p><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多</p><p> 指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184047.png"></p><p><strong>3、ip_hash</strong></p><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。例如：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184132.png"></p><p><strong>4、fair（第三方）</strong></p><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521184224.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    <url>/2021/02/21/Nginx/06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">1. 什么是动静分离</a></li><li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 准备工作</a></li><li><a href="#3-%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE">3. 具体配置</a></li><li><a href="#4-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">4. 最终测试</a></li></ul><h1 id="1-什么是动静分离"><a href="#1-什么是动静分离" class="headerlink" title="1. 什么是动静分离"></a>1. 什么是动静分离</h1><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，</p><p><strong>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案</strong>；</p><p><strong>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开</strong>。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204548.png"></p><p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><p><strong>在 liunx 系统中准备静态资源，用于进行访问</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204736.png"></p><h1 id="3-具体配置"><a href="#3-具体配置" class="headerlink" title="3. 具体配置"></a>3. 具体配置</h1><p><strong>在</strong> <strong>nginx</strong> <strong>配置文件中进行配置</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521204831.png"></p><h1 id="4-最终测试"><a href="#4-最终测试" class="headerlink" title="4. 最终测试"></a>4. 最终测试</h1><p><strong>浏览器中输入地址</strong> </p><p>http://服务器ip/image/01.jpg</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205251.png"></p><p><strong>因为配置文件</strong> <strong>autoindex on</strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205456.png"></p><p><strong>在浏览器地址栏输入地址</strong></p><p>http://服务器ip/www/a.html</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205633.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <url>/2021/02/21/Nginx/07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-keepalivednginx-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F">1. Keepalived+Nginx 高可用集群（主从模式）</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 配置高可用的准备工作</a></li><li><a href="#3-%E5%9C%A8%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85keepalived">3. 在两台服务器上安装keepalived</a></li><li><a href="#4-%E5%AE%8C%E6%88%90%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE">4. 完成高可用配置(主从配置)</a></li><li><a href="#5-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">5. 最终测试</a></li></ul><h1 id="1-Keepalived-Nginx-高可用集群（主从模式）"><a href="#1-Keepalived-Nginx-高可用集群（主从模式）" class="headerlink" title="1. Keepalived+Nginx 高可用集群（主从模式）"></a>1. Keepalived+Nginx 高可用集群（主从模式）</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521211609.png"></p><h1 id="2-配置高可用的准备工作"><a href="#2-配置高可用的准备工作" class="headerlink" title="2. 配置高可用的准备工作"></a>2. 配置高可用的准备工作</h1><ol><li>需要两台服务器</li><li>需要keepalived</li><li>需要虚拟ip</li></ol><h1 id="3-在两台服务器上安装keepalived"><a href="#3-在两台服务器上安装keepalived" class="headerlink" title="3. 在两台服务器上安装keepalived"></a>3. 在两台服务器上安装keepalived</h1><ol><li><p>使用yum命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install keepalived-v<br></code></pre></td></tr></table></figure></li><li><p>安装完成之后，在etc里面生成keepalived，有文件keepalived.conf</p></li></ol><h1 id="4-完成高可用配置-主从配置"><a href="#4-完成高可用配置-主从配置" class="headerlink" title="4. 完成高可用配置(主从配置)"></a>4. 完成高可用配置(主从配置)</h1><ol><li>修改<code>/etc/keepalived/keepalived.conf</code>配置文件</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">global_defs</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">notification_email</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">acassen@firewall.loc</span><br><br><span class="hljs-attr">failover@firewall.loc</span><br><br><span class="hljs-attr">sysadmin@firewall.loc</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">notification_email_from</span> <span class="hljs-string">Alexandre.Cassen@firewall.loc</span><br><br><span class="hljs-attr">smtp_server</span> <span class="hljs-string">192.168.17.129</span><br><br><span class="hljs-attr">smtp_connect_timeout</span> <span class="hljs-string">30</span><br><br><span class="hljs-attr">router_id</span> <span class="hljs-string">LVS_DEVEL</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">vrrp_script</span> <span class="hljs-string">chk_http_port &#123;</span><br><span class="hljs-attr">script</span> <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span><br><br><span class="hljs-attr">interval</span> <span class="hljs-string">2#（检测脚本执行的间隔）</span><br><br><span class="hljs-attr">weight</span> <span class="hljs-string">2</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">vrrp_instance</span> <span class="hljs-string">VI_1 &#123;</span><br><br><span class="hljs-attr">state</span> <span class="hljs-string">BACKUP# 备份服务器上将 MASTER 改为 BACKUP</span><br><br><span class="hljs-attr">interface</span> <span class="hljs-string">ens33//网卡</span><br><br><span class="hljs-attr">virtual_router_id</span> <span class="hljs-string">51# 主、备机的 virtual_router_id 必须相同</span><br><br><span class="hljs-attr">priority</span> <span class="hljs-string">100# 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><br><span class="hljs-attr">advert_int</span> <span class="hljs-string">1</span><br><br><span class="hljs-attr">authentication</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-attr">auth_type</span> <span class="hljs-string">PASS</span><br><br><br><span class="hljs-attr">auth_pass</span> <span class="hljs-string">1111</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">virtual_ipaddress</span> <span class="hljs-string">&#123;</span><br><br><span class="hljs-meta">192.168.17.50</span> <span class="hljs-string">// VRRP H 虚拟地址</span><br><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">&#125;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>在<code>/usr/local/src</code>添加检测脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>A=`ps -C nginx –no-header |wc -l`<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<br>    <span class="hljs-keyword">then</span> /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx<br>    sleep 2<br>    <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<br>    <span class="hljs-keyword">then</span> killall keepalived<br>    <span class="hljs-keyword">fi</span><br> <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><ol start="3"><li>把两台服务器上nginx和keepalived启动</li></ol><p>启动nginx  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx<br></code></pre></td></tr></table></figure><p>启动keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start keepalived.service<br></code></pre></td></tr></table></figure><h1 id="5-最终测试"><a href="#5-最终测试" class="headerlink" title="5. 最终测试"></a>5. 最终测试</h1><ol><li>在浏览器地址栏输入虚拟地址ip 192.168.17.50</li></ol><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213142.png"></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213213.png"></p><ol start="2"><li>把主服务器(192.168.17.129) nginx和keepalived停止，在输入192.168.17.50</li></ol><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213341.png"></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521213419.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/02/21/Nginx/08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-master%E5%92%8Cworker">1. master和worker</a></li><li><a href="#2-worker%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%B7%A5%E4%BD%9C">2. worker如何进行工作</a></li><li><a href="#3-%E4%B8%80%E4%B8%AAmaster%E5%92%8C%E5%A4%9A%E4%B8%AAwoker%E6%9C%89%E5%A5%BD%E5%A4%84">3. 一个master和多个woker有好处</a></li><li><a href="#4-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E4%B8%AAworker%E5%90%88%E9%80%82">4. 设置多少个worker合适</a></li><li><a href="#5-%E8%BF%9E%E6%8E%A5%E6%95%B0worker_connection">5. 连接数worker_connection</a></li></ul><h1 id="1-master和worker"><a href="#1-master和worker" class="headerlink" title="1. master和worker"></a>1. master和worker</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205820.png"></p><h1 id="2-worker如何进行工作"><a href="#2-worker如何进行工作" class="headerlink" title="2. worker如何进行工作"></a>2. worker如何进行工作</h1><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521205949.png"></p><h1 id="3-一个master和多个woker有好处"><a href="#3-一个master和多个woker有好处" class="headerlink" title="3. 一个master和多个woker有好处"></a>3. 一个master和多个woker有好处</h1><p>首先，对于每个 worker 进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销，同时在编程以及问题查找时，也会方便很多。其次，采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，master 进程则很快启动新的 worker 进程。当然，worker 进程的异常退出，肯定是程序有 bug 了，异常退出，会导致当前 worker 上的所有请求失败，不过不会影响到所有请求，所以降低了风险。</p><ol><li>可以使用nginx –s reload热部署，利用nginx进行热部署操作</li><li>每个woker是独立的进程，如果有其中的一个woker出现问题，其他woker独立的，继续进行争抢，实现请求过程，不会造成服务中断</li></ol><h1 id="4-设置多少个worker合适"><a href="#4-设置多少个worker合适" class="headerlink" title="4. 设置多少个worker合适"></a>4. 设置多少个worker合适</h1><p>Nginx 同 redis 类似都采用了 io 多路复用机制，每个 worker 都是一个独立的进程，但每个进程里只有一个主线程，通过异步非阻塞的方式来处理请求， 即使是千上万个请求也不在话下。每个 worker 的线程可以把一个 cpu 的性能发挥到极致。所以 worker 数和服务器的 cpu 数相等是最为适宜的。设少了会浪费 cpu，设多了会造成 cpu 频繁切换上下文带来的损耗。</p><p>设置worker 数量: worker_processes 4     work 绑定 cpu(4 work 绑定 4cpu)。</p><h1 id="5-连接数worker-connection"><a href="#5-连接数worker-connection" class="headerlink" title="5. 连接数worker_connection"></a>5. 连接数worker_connection</h1><p>这个值是表示每个 worker 进程所能建立连接的最大值，所以，一个 nginx 能建立的最大连接数，应该是 worker_connections * worker_processes。当然，这里说的是最大连接数，对于 HTTP 请 求 本 地 资 源来 说 ， 能 够 支 持 的 最大 并 发 数 量 是 worker_connections * worker_processes，如果是支持 http1.1 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是： worker_connections * worker_processes /2，而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections *worker_processes/4。因为作为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接。</p><p>第一个：发送请求，占用了woker 的几个连接数？</p><p> 答案：2或者4个</p><p>第二个：nginx有一个master，有四个woker，每个woker支持最大的连接数1024，支持的最大并发数是多少？</p><p>普通的静态访问最大并发数是： worker_connections * worker_processes /2，</p><p>而如果是HTTP作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/4。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/README/"/>
    <url>/2021/02/21/Nginx/README/</url>
    
    <content type="html"><![CDATA[<h1 id="01-Niginx简介"><a href="#01-Niginx简介" class="headerlink" title="01-Niginx简介"></a><a href="01-Nginx%E7%AE%80%E4%BB%8B.md">01-Niginx简介</a></h1><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx">1. 什么是nginx</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#2-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">2. 正向代理与反向代理</a><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#21-%E6%A6%82%E5%BF%B5">2.1 概念</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#22-%E5%8C%BA%E5%88%AB">2.2 区别</a><ul><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80-%E4%BB%A3%E7%90%86-%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF">正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80%E4%BB%A3%E7%90%86-%E4%B8%80-%E6%9C%8D%E5%8A%A1%E7%AB%AF">反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</a></li></ul></li></ul></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#3-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">3. 负载均衡</a></li><li><a href="01-Nginx%E7%AE%80%E4%BB%8B.md/#4-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">4. 动静分离</a></li></ul><h1 id="02-Nginx的安装"><a href="#02-Nginx的安装" class="headerlink" title="02-Nginx的安装"></a><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md">02-Nginx的安装</a></h1><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%9F%BA%E4%BA%8Eapt%E6%BA%90%E5%AE%89%E8%A3%85">1. 基于apt源安装</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#11-%E5%AE%89%E8%A3%85">1.1 安装</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#12-%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">1.2 测试安装是否成功</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#13-%E5%8D%B8%E8%BD%BD">1.3 卸载</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%81%9C%E6%AD%A2nginx%E6%9C%8D%E5%8A%A1">1. 停止nginx服务</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E5%88%A0%E9%99%A4nginx-purge%E5%8C%85%E6%8B%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 删除nginx，-purge包括配置文件</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#3-%E7%A7%BB%E9%99%A4%E5%85%A8%E9%83%A8%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85">3. 移除全部不使用的软件包</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#4-%E7%BD%97%E5%88%97%E5%87%BA%E4%B8%8Enginx%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B9%B6%E5%88%A0%E9%99%A4">4. 罗列出与nginx相关的软件并删除</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#5-%E6%9F%A5%E7%9C%8Bnginx%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%A6%82%E6%9E%9C%E6%9C%89%E5%B0%B1kill%E6%8E%89">5. 查看nginx正在运行的进程，如果有就kill掉</a></li></ul></li></ul></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">2. 通过源码包编译安装</a><ul><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#1-%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96%E5%BA%93">1. 安装各种依赖库</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#2-%E5%AE%89%E8%A3%85nginx">2. 安装Nginx</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#3-%E9%85%8D%E7%BD%AE%E8%BD%AF%E9%93%BE%E6%8E%A5">3. 配置软链接</a></li><li><a href="02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85.md/#4-%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">4. 配置开机启动服务</a></li></ul></li></ul><h1 id="03-Nginx的常用命令和配置文件"><a href="#03-Nginx的常用命令和配置文件" class="headerlink" title="03-Nginx的常用命令和配置文件"></a><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md">03-Nginx的常用命令和配置文件</a></h1><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">1. 常用命令</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC">1. 查看版本</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-%E6%9F%A5%E7%9C%8B-nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">2. 查看 Nginx 配置语法的正确性</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#3-%E4%B8%BAnginx%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3. 为Nginx指定一个配置文件</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#4-%E5%90%AF%E5%8A%A8-nginx-%E6%9C%8D%E5%8A%A1">4. 启动 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#5-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8">5. 开机自启动</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#6-%E9%87%8D%E5%90%AF-nginx-%E6%9C%8D%E5%8A%A1">6. 重启 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#7-%E6%9F%A5%E7%9C%8B-nginx-%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81">7. 查看 Nginx 服务状态</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#8-%E9%87%8D%E8%BD%BD-nginx-%E6%9C%8D%E5%8A%A1">8. 重载 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#9-%E5%81%9C%E6%AD%A2-nginx-%E6%9C%8D%E5%8A%A1">9. 停止 Nginx 服务</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#10-%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9">10. 查看命令帮助</a></li></ul></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 配置文件</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%85%A8%E5%B1%80%E5%9D%97">第一部分：全局块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86events-%E5%9D%97">第二部分：events 块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86http-%E5%9D%97">第三部分：http 块</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1-http%E5%85%A8%E5%B1%80%E5%9D%97">1. http全局块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-server%E5%9D%97">2. server块</a><ul><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#1%E5%85%A8%E5%B1%80-server-%E5%9D%97">1.全局 server 块</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#2-location%E5%9D%97">2. location块</a></li></ul></li></ul></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#nginxconf-%E8%AF%A6%E7%BB%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D">nginx.conf 详细的配置文件介绍</a></li><li><a href="03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md/#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h1 id="04-Nginx配置实例-反向代理"><a href="#04-Nginx配置实例-反向代理" class="headerlink" title="04-Nginx配置实例-反向代理"></a><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.md">04-Nginx配置实例-反向代理</a></h1><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%B8%80">1. 反向代理实例一</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA-tomcat%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-1270018080%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2">1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0-host-%E6%96%87%E4%BB%B6%E5%B0%86-www123com-%E6%98%A0%E5%B0%84%E5%88%B0-127001">2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#3-%E5%9C%A8-nginxconf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A2%9E%E5%8A%A0%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE">3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></a></li></ul></li></ul></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%BA%8C">2. 反向代理实例二</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B-1">实现过程</a><ul><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#1%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-tomcat%E4%B8%80%E4%B8%AA-8001-%E7%AB%AF%E5%8F%A3%E4%B8%80%E4%B8%AA-8002-%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%87%86%E5%A4%87%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E9%A1%B5%E9%9D%A2">1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</a></li><li><a href="04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#2-%E4%BF%AE%E6%94%B9-nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8-http-%E5%9D%97%E4%B8%AD%E6%B7%BB%E5%8A%A0-server">2. 修改 nginx 的配置文件在 http 块中添加 server{}</a></li></ul></li></ul></li></ul><h1 id="05-Nginx配置实例-负载均衡"><a href="#05-Nginx配置实例-负载均衡" class="headerlink" title="05-Nginx配置实例-负载均衡"></a><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.md">05-Nginx配置实例-负载均衡</a></h1><ul><li><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/#1-%E9%A6%96%E5%85%88%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA%E5%90%8C%E6%97%B6%E5%90%AF%E5%8A%A8%E7%9A%84-tomcat">1. <strong>首先准备两个同时启动的</strong> <strong>Tomcat</strong></a></li><li><a href="05-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/#2-%E5%9C%A8-nginxconf-%E4%B8%AD%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE">2. <strong>在 nginx.conf 中进行配置</strong></a></li></ul><h1 id="06-Nginx配置实例-动静分离"><a href="#06-Nginx配置实例-动静分离" class="headerlink" title="06-Nginx配置实例-动静分离"></a><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.md">06-Nginx配置实例-动静分离</a></h1><ul><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">1. 什么是动静分离</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 准备工作</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#3-%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE">3. 具体配置</a></li><li><a href="06-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/#4-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">4. 最终测试</a></li></ul><h1 id="07-Nginx搭建高可用集群"><a href="#07-Nginx搭建高可用集群" class="headerlink" title="07-Nginx搭建高可用集群"></a><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md">07-Nginx搭建高可用集群</a></h1><ul><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#1-keepalivednginx-%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F">1. Keepalived+Nginx 高可用集群（主从模式）</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#2-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2. 配置高可用的准备工作</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#3-%E5%9C%A8%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85keepalived">3. 在两台服务器上安装keepalived</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#4-%E5%AE%8C%E6%88%90%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE">4. 完成高可用配置(主从配置)</a></li><li><a href="07-Nginx%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.md/#5-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">5. 最终测试</a></li></ul><h1 id="08-Nginx原理及优化参数配置"><a href="#08-Nginx原理及优化参数配置" class="headerlink" title="08-Nginx原理及优化参数配置"></a><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md">08-Nginx原理及优化参数配置</a></h1><ul><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#1-master%E5%92%8Cworker">1. master和worker</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#2-worker%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%B7%A5%E4%BD%9C">2. worker如何进行工作</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#3-%E4%B8%80%E4%B8%AAmaster%E5%92%8C%E5%A4%9A%E4%B8%AAwoker%E6%9C%89%E5%A5%BD%E5%A4%84">3. 一个master和多个woker有好处</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#4-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E4%B8%AAworker%E5%90%88%E9%80%82">4. 设置多少个worker合适</a></li><li><a href="08-Nginx%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE.md/#5-%E8%BF%9E%E6%8E%A5%E6%95%B0worker_connection">5. 连接数worker_connection</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/01-Nginx%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/02/21/01-Nginx%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx">1. 什么是nginx</a></li><li><a href="#2-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">2. 正向代理与反向代理</a><ul><li><a href="#21-%E6%A6%82%E5%BF%B5">2.1 概念</a></li><li><a href="#22-%E5%8C%BA%E5%88%AB">2.2 区别</a><ul><li><a href="#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80-%E4%BB%A3%E7%90%86-%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF">正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</a></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80%E4%BB%A3%E7%90%86-%E4%B8%80-%E6%9C%8D%E5%8A%A1%E7%AB%AF">反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</a></li></ul></li></ul></li><li><a href="#3-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">3. 负载均衡</a></li><li><a href="#4-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">4. 动静分离</a></li></ul><h1 id="1-什么是nginx"><a href="#1-什么是nginx" class="headerlink" title="1. 什么是nginx"></a>1. 什么是nginx</h1><p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能力强。</p><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等，但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h1 id="2-正向代理与反向代理"><a href="#2-正向代理与反向代理" class="headerlink" title="2. 正向代理与反向代理"></a>2. 正向代理与反向代理</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p><strong>正向代理</strong>是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><p><strong>反向代理</strong>正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p><h2 id="2-2-区别"><a href="#2-2-区别" class="headerlink" title="2.2 区别"></a>2.2 区别</h2><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519095355.png"></p><p>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519095419.png"></p><h3 id="正向代理-客户端-lt-一-gt-代理-一-gt-服务端"><a href="#正向代理-客户端-lt-一-gt-代理-一-gt-服务端" class="headerlink" title="正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端"></a>正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</h3><p>正向代理简单地打个租房的比方:</p><p>A(客户端)想租C(服务端)的房子,但是A(客户端)并不认识C(服务端)租不到。<br> B(代理)认识C(服务端)能租这个房子所以你找了B(代理)帮忙租到了这个房子。</p><p>这个过程中C(服务端)不认识A(客户端)只认识B(代理)<br> C(服务端)并不知道A(客户端)租了房子，只知道房子租给了B(代理)。</p><h3 id="反向代理-客户端-一-gt-代理-lt-一-gt-服务端"><a href="#反向代理-客户端-一-gt-代理-lt-一-gt-服务端" class="headerlink" title="反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端"></a>反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</h3><p>反向代理也用一个租房的例子:</p><p>A(客户端)想租一个房子,B(代理)就把这个房子租给了他。<br> 这时候实际上C(服务端)才是房东。<br> B(代理)是中介把这个房子租给了A(客户端)。</p><p>这个过程中A(客户端)并不知道这个房子到底谁才是房东<br> 他都有可能认为这个房子就是B(代理)的</p><p><strong>由上的例子和图，我们可以知道正向代理和反向代理的区别在于代理的对象不一样,正向代理的代理对象是客户端,反向代理的代理对象是服务端。</strong></p><h1 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h1><p><strong><em>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负\载均衡</em></strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519100327.png"></p><h1 id="4-动静分离"><a href="#4-动静分离" class="headerlink" title="4. 动静分离"></a>4. 动静分离</h1><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519100459.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/21/02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%9F%BA%E4%BA%8Eapt%E6%BA%90%E5%AE%89%E8%A3%85">1. 基于apt源安装</a><ul><li><a href="#11-%E5%AE%89%E8%A3%85">1.1 安装</a></li><li><a href="#12-%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">1.2 测试安装是否成功</a></li><li><a href="#13-%E5%8D%B8%E8%BD%BD">1.3 卸载</a><ul><li><a href="#1-%E5%81%9C%E6%AD%A2nginx%E6%9C%8D%E5%8A%A1">1. 停止nginx服务</a></li><li><a href="#2-%E5%88%A0%E9%99%A4nginx-purge%E5%8C%85%E6%8B%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 删除nginx，-purge包括配置文件</a></li><li><a href="#3-%E7%A7%BB%E9%99%A4%E5%85%A8%E9%83%A8%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85">3. 移除全部不使用的软件包</a></li><li><a href="#4-%E7%BD%97%E5%88%97%E5%87%BA%E4%B8%8Enginx%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B9%B6%E5%88%A0%E9%99%A4">4. 罗列出与nginx相关的软件并删除</a></li><li><a href="#5-%E6%9F%A5%E7%9C%8Bnginx%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%A6%82%E6%9E%9C%E6%9C%89%E5%B0%B1kill%E6%8E%89">5. 查看nginx正在运行的进程，如果有就kill掉</a></li></ul></li></ul></li><li><a href="#2-%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">2. 通过源码包编译安装</a><ul><li><a href="#1-%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96%E5%BA%93">1. 安装各种依赖库</a></li><li><a href="#2-%E5%AE%89%E8%A3%85nginx">2. 安装Nginx</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E8%BD%AF%E9%93%BE%E6%8E%A5">3. 配置软链接</a></li><li><a href="#4-%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">4. 配置开机启动服务</a></li></ul></li></ul><p>此安装过程是在ubuntu18下完成的。</p><h1 id="1-基于apt源安装"><a href="#1-基于apt源安装" class="headerlink" title="1. 基于apt源安装"></a>1. 基于apt源安装</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 更新包<br>sudo apt-get update<br>// 下载安装nginx<br>sudo apt-get install nginx<br></code></pre></td></tr></table></figure><p>Ubuntu安装之后的文件结构大致为：</p><ul><li>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</li><li>程序文件在/usr/sbin/nginx</li><li>日志放在了/var/log/nginx中</li><li>并已经在/etc/init.d/下创建了启动脚本nginx</li><li>默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本 默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</li></ul><p>其实从上面的根目录文件夹可以知道，Linux系统的配置文件一般放在/etc，日志一般放在/var/log，运行的程序一般放在/usr/sbin或者/usr/bin。</p><p>当然，如果要更清楚Nginx的配置项放在什么地方，可以打开/etc/nginx/nginx.conf</p><p>然后通过这种方式安装的，会自动创建服务，会自动在/etc/init.d/nginx新建服务脚本，然后就可以使用一下命令来启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;<br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides:  nginx</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start:    <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop:     <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop:      0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: starts the nginx web server</span><br><span class="hljs-meta">#</span><span class="bash"> Description:       starts nginx using start-stop-daemon</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>DAEMON=/usr/sbin/nginx<br>NAME=nginx<br>DESC=nginx<br><br><span class="hljs-meta">#</span><span class="bash"> Include nginx defaults <span class="hljs-keyword">if</span> available</span><br>if [ -r /etc/default/nginx ]; then<br>. /etc/default/nginx<br>fi<br><br>STOP_SCHEDULE=&quot;$&#123;STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5&#125;&quot;<br><br>test -x $DAEMON || exit 0<br><br>. /lib/init/vars.sh<br>. /lib/lsb/init-functions<br><br><span class="hljs-meta">#</span><span class="bash"> Try to extract nginx pidfile</span><br>PID=$(cat /etc/nginx/nginx.conf | grep -Ev &#x27;^\s*#&#x27; | awk &#x27;BEGIN &#123; RS=&quot;[;&#123;&#125;]&quot; &#125; &#123; if ($1 == &quot;pid&quot;) print $2 &#125;&#x27; | head -n1)<br>if [ -z &quot;$PID&quot; ]; then<br>PID=/run/nginx.pid<br>fi<br><br>if [ -n &quot;$ULIMIT&quot; ]; then<br><span class="hljs-meta">#</span><span class="bash"> Set <span class="hljs-built_in">ulimit</span> <span class="hljs-keyword">if</span> it is <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /etc/default/nginx</span><br>ulimit $ULIMIT<br>fi<br><br>start_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Start the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Returns:</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been started</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be started</span><br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test &gt; /dev/null \<br>|| return 1<br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \<br><span class="hljs-meta">$</span><span class="bash">DAEMON_OPTS 2&gt;/dev/null \</span><br><span class="bash">|| <span class="hljs-built_in">return</span> 2</span><br>&#125;<br><br>test_config() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Test the nginx configuration</span><br><span class="hljs-meta">$</span><span class="bash">DAEMON -t <span class="hljs-variable">$DAEMON_OPTS</span> &gt;/dev/null 2&gt;&amp;1</span><br>&#125;<br><br>stop_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Stops the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been stopped</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already stopped</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be stopped</span><br><span class="hljs-meta">#</span><span class="bash">   other <span class="hljs-keyword">if</span> a failure occurred</span><br>start-stop-daemon --stop --quiet --retry=$STOP_SCHEDULE --pidfile $PID --name $NAME<br>RETVAL=&quot;$?&quot;<br>sleep 1<br>return &quot;$RETVAL&quot;<br>&#125;<br><br>reload_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Function that sends a SIGHUP to the daemon/service</span><br>start-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>rotate_logs() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Rotate <span class="hljs-built_in">log</span> files</span><br>start-stop-daemon --stop --signal USR1 --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>upgrade_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Online upgrade nginx executable</span><br><span class="hljs-meta">#</span><span class="bash"> http://nginx.org/en/docs/control.html</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> nginx has been successfully upgraded</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> nginx is not running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> the pid files were not created on time</span><br><span class="hljs-meta">#</span><span class="bash">   3 <span class="hljs-keyword">if</span> the old master could not be killed</span><br>if start-stop-daemon --stop --signal USR2 --quiet --pidfile $PID --name $NAME; then<br><span class="hljs-meta">#</span><span class="bash"> Wait <span class="hljs-keyword">for</span> both old and new master to write their pid file</span><br>while [ ! -s &quot;$&#123;PID&#125;.oldbin&quot; ] || [ ! -s &quot;$&#123;PID&#125;&quot; ]; do<br>cnt=`expr $cnt + 1`<br>if [ $cnt -gt 10 ]; then<br>return 2<br>fi<br>sleep 1<br>done<br><span class="hljs-meta">#</span><span class="bash"> Everything is ready, gracefully stop the old master</span><br>if start-stop-daemon --stop --signal QUIT --quiet --pidfile &quot;$&#123;PID&#125;.oldbin&quot; --name $NAME; then<br>return 0<br>else<br>return 3<br>fi<br>else<br>return 1<br>fi<br>&#125;<br><br>case &quot;$1&quot; in<br>start)<br>log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot;<br>start_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>stop)<br>log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot;<br>stop_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>restart)<br>log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>stop_nginx<br>case &quot;$?&quot; in<br>0|1)<br>start_nginx<br>case &quot;$?&quot; in<br>0) log_end_msg 0 ;;<br>1) log_end_msg 1 ;; # Old process is still running<br>*) log_end_msg 1 ;; # Failed to start<br>esac<br>;;<br>*)<br># Failed to stop<br>log_end_msg 1<br>;;<br>esac<br>;;<br>reload|force-reload)<br>log_daemon_msg &quot;Reloading $DESC configuration&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># This is not entirely correct since the on-disk nginx binary</span></span><br><span class="hljs-meta">#</span><span class="bash"> may differ from the in-memory one, but that<span class="hljs-string">&#x27;s not common.</span></span><br><span class="hljs-meta">#</span><span class="bash"> We prefer to check the configuration and <span class="hljs-built_in">return</span> an error</span><br><span class="hljs-meta">#</span><span class="bash"> to the administrator.</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>reload_nginx<br>log_end_msg $?<br>;;<br>configtest|testconfig)<br>log_daemon_msg &quot;Testing $DESC configuration&quot;<br>test_config<br>log_end_msg $?<br>;;<br>status)<br>status_of_proc -p $PID &quot;$DAEMON&quot; &quot;$NAME&quot; &amp;&amp; exit 0 || exit $?<br>;;<br>upgrade)<br>log_daemon_msg &quot;Upgrading binary&quot; &quot;$NAME&quot;<br>upgrade_nginx<br>log_end_msg $?<br>;;<br>rotate)<br>log_daemon_msg &quot;Re-opening $DESC log files&quot; &quot;$NAME&quot;<br>rotate_logs<br>log_end_msg $?<br>;;<br>*)<br>echo &quot;Usage: $NAME &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;&quot; &gt;&amp;2<br>exit 3<br>;;<br>esac<br><br></code></pre></td></tr></table></figure><p>还有一个好处，创建好的文件由于放在/usr/sbin目录下，所以能直接在终端中使用nginx命令而无需指定路径。</p><h2 id="1-2-测试安装是否成功"><a href="#1-2-测试安装是否成功" class="headerlink" title="1.2 测试安装是否成功"></a>1.2 测试安装是否成功</h2><p>在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -t<br></code></pre></td></tr></table></figure><p>窗口显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br></code></pre></td></tr></table></figure><p>在浏览器中输入ip地址：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519123550.png"></p><h2 id="1-3-卸载"><a href="#1-3-卸载" class="headerlink" title="1.3 卸载"></a>1.3 卸载</h2><h3 id="1-停止nginx服务"><a href="#1-停止nginx服务" class="headerlink" title="1. 停止nginx服务"></a>1. 停止nginx服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx stop<br></code></pre></td></tr></table></figure><h3 id="2-删除nginx，-purge包括配置文件"><a href="#2-删除nginx，-purge包括配置文件" class="headerlink" title="2. 删除nginx，-purge包括配置文件"></a>2. 删除nginx，-purge包括配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get --purge remove nginx<br></code></pre></td></tr></table></figure><h3 id="3-移除全部不使用的软件包"><a href="#3-移除全部不使用的软件包" class="headerlink" title="3. 移除全部不使用的软件包"></a>3. 移除全部不使用的软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get autoremove<br></code></pre></td></tr></table></figure><h3 id="4-罗列出与nginx相关的软件并删除"><a href="#4-罗列出与nginx相关的软件并删除" class="headerlink" title="4. 罗列出与nginx相关的软件并删除"></a>4. 罗列出与nginx相关的软件并删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg --get-selections|grep nginx<br>sudo apt-get --purge remove nginx<br>sudo apt-get --purge remove nginx-common<br>sudo apt-get --purge remove nginx-core<br></code></pre></td></tr></table></figure><h3 id="5-查看nginx正在运行的进程，如果有就kill掉"><a href="#5-查看nginx正在运行的进程，如果有就kill掉" class="headerlink" title="5. 查看nginx正在运行的进程，如果有就kill掉"></a>5. 查看nginx正在运行的进程，如果有就kill掉</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef |grep nginx<br>sudo kill -9 XXX<br></code></pre></td></tr></table></figure><h1 id="2-通过源码包编译安装"><a href="#2-通过源码包编译安装" class="headerlink" title="2. 通过源码包编译安装"></a>2. 通过源码包编译安装</h1><p>这种方式可以自定安装指定的模块以及最新的版本。方式更灵活。</p><p>官方下载页面：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p>configure配置文件详解：<a href="http://nginx.org/en/docs/configure.html">http://nginx.org/en/docs/configure.html</a></p><h2 id="1-安装各种依赖库"><a href="#1-安装各种依赖库" class="headerlink" title="1. 安装各种依赖库"></a>1. 安装各种依赖库</h2><p> 安装gcc g++的依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install build-essential<br>sudo apt-get install libtool<br></code></pre></td></tr></table></figure><p>安装pcre依赖库（<a href="http://www.pcre.org/%EF%BC%89">http://www.pcre.org/）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install libpcre3 libpcre3-dev<br></code></pre></td></tr></table></figure><p>安装zlib依赖库（<a href="http://www.zlib.net/">http://www.zlib.net</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install zlib1g-dev<br></code></pre></td></tr></table></figure><p>安装SSL依赖库（18.04默认已经安装了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install openssl<br></code></pre></td></tr></table></figure><h2 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2. 安装Nginx"></a>2. 安装Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">下载最新版本：</span><br>wget http://nginx.org/download/nginx-1.13.6.tar.gz<br><span class="hljs-meta">#</span><span class="bash">解压：</span><br>tar -zxvf nginx-1.13.6.tar.gz<br><span class="hljs-meta">#</span><span class="bash">进入解压目录：</span><br>cd nginx-1.13.6<br><span class="hljs-meta">#</span><span class="bash">配置：</span><br>./configure --prefix=/usr/local/nginx <br><span class="hljs-meta">#</span><span class="bash">编译：</span><br>make<br><span class="hljs-meta">#</span><span class="bash">安装：</span><br>sudo make install<br><span class="hljs-meta">#</span><span class="bash">启动：</span><br>sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过-h查看帮助命令。<br><span class="hljs-meta">#</span><span class="bash">查看进程：</span><br>ps -ef | grep nginx<br></code></pre></td></tr></table></figure><h2 id="3-配置软链接"><a href="#3-配置软链接" class="headerlink" title="3. 配置软链接"></a>3. 配置软链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx<br></code></pre></td></tr></table></figure><p>现在就可以不用路径直接输入nginx启动。</p><h2 id="4-配置开机启动服务"><a href="#4-配置开机启动服务" class="headerlink" title="4. 配置开机启动服务"></a>4. 配置开机启动服务</h2><p>在/etc/init.d/下创建nginx文件，sudo vim /etc/init.d/nginx，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides:  nginx</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start:    <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop:     <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop:      0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: starts the nginx web server</span><br><span class="hljs-meta">#</span><span class="bash"> Description:       starts nginx using start-stop-daemon</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>DAEMON=/usr/sbin/nginx<br>NAME=nginx<br>DESC=nginx<br><br><span class="hljs-meta">#</span><span class="bash"> Include nginx defaults <span class="hljs-keyword">if</span> available</span><br>if [ -r /etc/default/nginx ]; then<br>. /etc/default/nginx<br>fi<br><br>STOP_SCHEDULE=&quot;$&#123;STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5&#125;&quot;<br><br>test -x $DAEMON || exit 0<br><br>. /lib/init/vars.sh<br>. /lib/lsb/init-functions<br><br><span class="hljs-meta">#</span><span class="bash"> Try to extract nginx pidfile</span><br>PID=$(cat /etc/nginx/nginx.conf | grep -Ev &#x27;^\s*#&#x27; | awk &#x27;BEGIN &#123; RS=&quot;[;&#123;&#125;]&quot; &#125; &#123; if ($1 == &quot;pid&quot;) print $2 &#125;&#x27; | head -n1)<br>if [ -z &quot;$PID&quot; ]; then<br>PID=/run/nginx.pid<br>fi<br><br>if [ -n &quot;$ULIMIT&quot; ]; then<br><span class="hljs-meta">#</span><span class="bash"> Set <span class="hljs-built_in">ulimit</span> <span class="hljs-keyword">if</span> it is <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /etc/default/nginx</span><br>ulimit $ULIMIT<br>fi<br><br>start_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Start the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Returns:</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been started</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be started</span><br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test &gt; /dev/null \<br>|| return 1<br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \<br><span class="hljs-meta">$</span><span class="bash">DAEMON_OPTS 2&gt;/dev/null \</span><br><span class="bash">|| <span class="hljs-built_in">return</span> 2</span><br>&#125;<br><br>test_config() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Test the nginx configuration</span><br><span class="hljs-meta">$</span><span class="bash">DAEMON -t <span class="hljs-variable">$DAEMON_OPTS</span> &gt;/dev/null 2&gt;&amp;1</span><br>&#125;<br><br>stop_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Stops the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been stopped</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already stopped</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be stopped</span><br><span class="hljs-meta">#</span><span class="bash">   other <span class="hljs-keyword">if</span> a failure occurred</span><br>start-stop-daemon --stop --quiet --retry=$STOP_SCHEDULE --pidfile $PID --name $NAME<br>RETVAL=&quot;$?&quot;<br>sleep 1<br>return &quot;$RETVAL&quot;<br>&#125;<br><br>reload_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Function that sends a SIGHUP to the daemon/service</span><br>start-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>rotate_logs() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Rotate <span class="hljs-built_in">log</span> files</span><br>start-stop-daemon --stop --signal USR1 --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>upgrade_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Online upgrade nginx executable</span><br><span class="hljs-meta">#</span><span class="bash"> http://nginx.org/en/docs/control.html</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> nginx has been successfully upgraded</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> nginx is not running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> the pid files were not created on time</span><br><span class="hljs-meta">#</span><span class="bash">   3 <span class="hljs-keyword">if</span> the old master could not be killed</span><br>if start-stop-daemon --stop --signal USR2 --quiet --pidfile $PID --name $NAME; then<br><span class="hljs-meta">#</span><span class="bash"> Wait <span class="hljs-keyword">for</span> both old and new master to write their pid file</span><br>while [ ! -s &quot;$&#123;PID&#125;.oldbin&quot; ] || [ ! -s &quot;$&#123;PID&#125;&quot; ]; do<br>cnt=`expr $cnt + 1`<br>if [ $cnt -gt 10 ]; then<br>return 2<br>fi<br>sleep 1<br>done<br><span class="hljs-meta">#</span><span class="bash"> Everything is ready, gracefully stop the old master</span><br>if start-stop-daemon --stop --signal QUIT --quiet --pidfile &quot;$&#123;PID&#125;.oldbin&quot; --name $NAME; then<br>return 0<br>else<br>return 3<br>fi<br>else<br>return 1<br>fi<br>&#125;<br><br>case &quot;$1&quot; in<br>start)<br>log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot;<br>start_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>stop)<br>log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot;<br>stop_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>restart)<br>log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>stop_nginx<br>case &quot;$?&quot; in<br>0|1)<br>start_nginx<br>case &quot;$?&quot; in<br>0) log_end_msg 0 ;;<br>1) log_end_msg 1 ;; # Old process is still running<br>*) log_end_msg 1 ;; # Failed to start<br>esac<br>;;<br>*)<br># Failed to stop<br>log_end_msg 1<br>;;<br>esac<br>;;<br>reload|force-reload)<br>log_daemon_msg &quot;Reloading $DESC configuration&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># This is not entirely correct since the on-disk nginx binary</span></span><br><span class="hljs-meta">#</span><span class="bash"> may differ from the in-memory one, but that<span class="hljs-string">&#x27;s not common.</span></span><br><span class="hljs-meta">#</span><span class="bash"> We prefer to check the configuration and <span class="hljs-built_in">return</span> an error</span><br><span class="hljs-meta">#</span><span class="bash"> to the administrator.</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>reload_nginx<br>log_end_msg $?<br>;;<br>configtest|testconfig)<br>log_daemon_msg &quot;Testing $DESC configuration&quot;<br>test_config<br>log_end_msg $?<br>;;<br>status)<br>status_of_proc -p $PID &quot;$DAEMON&quot; &quot;$NAME&quot; &amp;&amp; exit 0 || exit $?<br>;;<br>upgrade)<br>log_daemon_msg &quot;Upgrading binary&quot; &quot;$NAME&quot;<br>upgrade_nginx<br>log_end_msg $?<br>;;<br>rotate)<br>log_daemon_msg &quot;Re-opening $DESC log files&quot; &quot;$NAME&quot;<br>rotate_logs<br>log_end_msg $?<br>;;<br>*)<br>echo &quot;Usage: $NAME &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;&quot; &gt;&amp;2<br>exit 3<br>;;<br>esac<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">设置服务脚本有执行权限</span><br>sudo chmod +x /etc/init.d/nginx<br><span class="hljs-meta">#</span><span class="bash">注册服务<span class="hljs-built_in">cd</span> /etc/init.d/</span><br>sudo update-rc.d nginx defaults<br></code></pre></td></tr></table></figure><p>现在基本上就可以开机启动了，常用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2021/02/21/04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%B8%80">1. 反向代理实例一</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#1-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA-tomcat%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-1270018080%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2">1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</a></li><li><a href="#2-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0-host-%E6%96%87%E4%BB%B6%E5%B0%86-www123com-%E6%98%A0%E5%B0%84%E5%88%B0-127001">2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1</a></li><li><a href="#3-%E5%9C%A8-nginxconf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A2%9E%E5%8A%A0%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE">3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></a></li></ul></li></ul></li><li><a href="#2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%BA%8C">2. 反向代理实例二</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B-1">实现过程</a><ul><li><a href="#1%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-tomcat%E4%B8%80%E4%B8%AA-8001-%E7%AB%AF%E5%8F%A3%E4%B8%80%E4%B8%AA-8002-%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%87%86%E5%A4%87%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E9%A1%B5%E9%9D%A2">1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</a></li><li><a href="#2-%E4%BF%AE%E6%94%B9-nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8-http-%E5%9D%97%E4%B8%AD%E6%B7%BB%E5%8A%A0-server">2. 修改 nginx 的配置文件在 http 块中添加 server{}</a></li></ul></li></ul></li></ul><h1 id="1-反向代理实例一"><a href="#1-反向代理实例一" class="headerlink" title="1. 反向代理实例一"></a>1. 反向代理实例一</h1><p>实现效果：使用 nginx 反向代理，访问 <a href="http://www.123.com/">www.123.com</a> 直接跳转到 127.0.0.1:8080</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-启动一个-tomcat，浏览器地址栏输入-127-0-0-1-8080，出现如下界面"><a href="#1-启动一个-tomcat，浏览器地址栏输入-127-0-0-1-8080，出现如下界面" class="headerlink" title="1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面"></a>1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173446.png"></p><h3 id="2-通过修改本地-host-文件，将-www-123-com-映射到-127-0-0-1"><a href="#2-通过修改本地-host-文件，将-www-123-com-映射到-127-0-0-1" class="headerlink" title="2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1"></a>2. 通过修改本地 host 文件，将 <a href="http://www.123.com/">www.123.com</a> 映射到 127.0.0.1</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173537.png"></p><p>配置完成之后，我们便可以通过 <a href="http://www.123.com:8080/">www.123.com:8080</a> 访问到第一步出现的 Tomcat 初始界面。那么如何只需要输入 <a href="http://www.123.com/">www.123.com</a> 便可以跳转到 Tomcat 初始界面呢？便用到 nginx 的反向代理。</p><h3 id="3-在-nginx-conf-配置文件中增加如下配置"><a href="#3-在-nginx-conf-配置文件中增加如下配置" class="headerlink" title="3. 在 nginx.conf 配置文件中增加如下配置"></a>3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173630.png"></p><p>如上配置，我们监听 80 端口，访问域名为 <a href="http://www.123.com,不加端口号时默认为/">www.123.com，不加端口号时默认为</a> 80 端口，故访问该域名时会跳转到 127.0.0.1:8080 路径上。在浏览器端输入 <a href="http://www.123.com/">www.123.com</a> 结果如下：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173703.png"></p><h1 id="2-反向代理实例二"><a href="#2-反向代理实例二" class="headerlink" title="2. 反向代理实例二"></a>2. 反向代理实例二</h1><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中 nginx 监听端口为 9001，</p><blockquote><p>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8081 </p><p>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8082</p></blockquote><h2 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-准备两个-tomcat，一个-8001-端口，一个-8002-端口，并准备好测试的页面"><a href="#1-准备两个-tomcat，一个-8001-端口，一个-8002-端口，并准备好测试的页面" class="headerlink" title="1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面"></a>1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</h3><h3 id="2-修改-nginx-的配置文件在-http-块中添加-server"><a href="#2-修改-nginx-的配置文件在-http-块中添加-server" class="headerlink" title="2. 修改 nginx 的配置文件在 http 块中添加 server{}"></a>2. 修改 nginx 的配置文件在 http 块中添加 server{}</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173939.png"></p><p><strong>location</strong> <strong>指令说明</strong>   该指令用于匹配 URL。</p><p>语法如下：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521174037.png"></p><ol><li>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li>~：用于表示 uri 包含正则表达式，并且区分大小写。</li><li>~*：用于表示 uri 包含正则表达式，并且不区分大小写。</li><li>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</li></ol><p>*<em>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~</em> 标识。**</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/01-Nginx%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/02/21/Nginx/01-Nginx%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx">1. 什么是nginx</a></li><li><a href="#2-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">2. 正向代理与反向代理</a><ul><li><a href="#21-%E6%A6%82%E5%BF%B5">2.1 概念</a></li><li><a href="#22-%E5%8C%BA%E5%88%AB">2.2 区别</a><ul><li><a href="#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80-%E4%BB%A3%E7%90%86-%E4%B8%80%E6%9C%8D%E5%8A%A1%E7%AB%AF">正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</a></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E4%B8%80%E4%BB%A3%E7%90%86-%E4%B8%80-%E6%9C%8D%E5%8A%A1%E7%AB%AF">反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</a></li></ul></li></ul></li><li><a href="#3-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">3. 负载均衡</a></li><li><a href="#4-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">4. 动静分离</a></li></ul><h1 id="1-什么是nginx"><a href="#1-什么是nginx" class="headerlink" title="1. 什么是nginx"></a>1. 什么是nginx</h1><p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器,特点是占有内存少，并发能力强。</p><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等，但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h1 id="2-正向代理与反向代理"><a href="#2-正向代理与反向代理" class="headerlink" title="2. 正向代理与反向代理"></a>2. 正向代理与反向代理</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p><strong>正向代理</strong>是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><p><strong>反向代理</strong>正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p><h2 id="2-2-区别"><a href="#2-2-区别" class="headerlink" title="2.2 区别"></a>2.2 区别</h2><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519095355.png"></p><p>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519095419.png"></p><h3 id="正向代理-客户端-lt-一-gt-代理-一-gt-服务端"><a href="#正向代理-客户端-lt-一-gt-代理-一-gt-服务端" class="headerlink" title="正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端"></a>正向代理:客户端 &lt;一&gt; 代理 一&gt;服务端</h3><p>正向代理简单地打个租房的比方:</p><p>A(客户端)想租C(服务端)的房子,但是A(客户端)并不认识C(服务端)租不到。<br> B(代理)认识C(服务端)能租这个房子所以你找了B(代理)帮忙租到了这个房子。</p><p>这个过程中C(服务端)不认识A(客户端)只认识B(代理)<br> C(服务端)并不知道A(客户端)租了房子，只知道房子租给了B(代理)。</p><h3 id="反向代理-客户端-一-gt-代理-lt-一-gt-服务端"><a href="#反向代理-客户端-一-gt-代理-lt-一-gt-服务端" class="headerlink" title="反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端"></a>反向代理:客户端 一&gt;代理 &lt;一&gt; 服务端</h3><p>反向代理也用一个租房的例子:</p><p>A(客户端)想租一个房子,B(代理)就把这个房子租给了他。<br> 这时候实际上C(服务端)才是房东。<br> B(代理)是中介把这个房子租给了A(客户端)。</p><p>这个过程中A(客户端)并不知道这个房子到底谁才是房东<br> 他都有可能认为这个房子就是B(代理)的</p><p><strong>由上的例子和图，我们可以知道正向代理和反向代理的区别在于代理的对象不一样,正向代理的代理对象是客户端,反向代理的代理对象是服务端。</strong></p><h1 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h1><p><strong><em>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负\载均衡</em></strong></p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519100327.png"></p><h1 id="4-动静分离"><a href="#4-动静分离" class="headerlink" title="4. 动静分离"></a>4. 动静分离</h1><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519100459.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/21/Nginx/02-Nginx%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%9F%BA%E4%BA%8Eapt%E6%BA%90%E5%AE%89%E8%A3%85">1. 基于apt源安装</a><ul><li><a href="#11-%E5%AE%89%E8%A3%85">1.1 安装</a></li><li><a href="#12-%E6%B5%8B%E8%AF%95%E5%AE%89%E8%A3%85%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">1.2 测试安装是否成功</a></li><li><a href="#13-%E5%8D%B8%E8%BD%BD">1.3 卸载</a><ul><li><a href="#1-%E5%81%9C%E6%AD%A2nginx%E6%9C%8D%E5%8A%A1">1. 停止nginx服务</a></li><li><a href="#2-%E5%88%A0%E9%99%A4nginx-purge%E5%8C%85%E6%8B%AC%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 删除nginx，-purge包括配置文件</a></li><li><a href="#3-%E7%A7%BB%E9%99%A4%E5%85%A8%E9%83%A8%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85">3. 移除全部不使用的软件包</a></li><li><a href="#4-%E7%BD%97%E5%88%97%E5%87%BA%E4%B8%8Enginx%E7%9B%B8%E5%85%B3%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B9%B6%E5%88%A0%E9%99%A4">4. 罗列出与nginx相关的软件并删除</a></li><li><a href="#5-%E6%9F%A5%E7%9C%8Bnginx%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%A6%82%E6%9E%9C%E6%9C%89%E5%B0%B1kill%E6%8E%89">5. 查看nginx正在运行的进程，如果有就kill掉</a></li></ul></li></ul></li><li><a href="#2-%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">2. 通过源码包编译安装</a><ul><li><a href="#1-%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E4%BE%9D%E8%B5%96%E5%BA%93">1. 安装各种依赖库</a></li><li><a href="#2-%E5%AE%89%E8%A3%85nginx">2. 安装Nginx</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E8%BD%AF%E9%93%BE%E6%8E%A5">3. 配置软链接</a></li><li><a href="#4-%E9%85%8D%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">4. 配置开机启动服务</a></li></ul></li></ul><p>此安装过程是在ubuntu18下完成的。</p><h1 id="1-基于apt源安装"><a href="#1-基于apt源安装" class="headerlink" title="1. 基于apt源安装"></a>1. 基于apt源安装</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 更新包<br>sudo apt-get update<br>// 下载安装nginx<br>sudo apt-get install nginx<br></code></pre></td></tr></table></figure><p>Ubuntu安装之后的文件结构大致为：</p><ul><li>所有的配置文件都在/etc/nginx下，并且每个虚拟主机已经安排在了/etc/nginx/sites-available下</li><li>程序文件在/usr/sbin/nginx</li><li>日志放在了/var/log/nginx中</li><li>并已经在/etc/init.d/下创建了启动脚本nginx</li><li>默认的虚拟主机的目录设置在了/var/www/nginx-default (有的版本 默认的虚拟主机的目录设置在了/var/www, 请参考/etc/nginx/sites-available里的配置)</li></ul><p>其实从上面的根目录文件夹可以知道，Linux系统的配置文件一般放在/etc，日志一般放在/var/log，运行的程序一般放在/usr/sbin或者/usr/bin。</p><p>当然，如果要更清楚Nginx的配置项放在什么地方，可以打开/etc/nginx/nginx.conf</p><p>然后通过这种方式安装的，会自动创建服务，会自动在/etc/init.d/nginx新建服务脚本，然后就可以使用一下命令来启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;<br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides:  nginx</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start:    <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop:     <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop:      0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: starts the nginx web server</span><br><span class="hljs-meta">#</span><span class="bash"> Description:       starts nginx using start-stop-daemon</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>DAEMON=/usr/sbin/nginx<br>NAME=nginx<br>DESC=nginx<br><br><span class="hljs-meta">#</span><span class="bash"> Include nginx defaults <span class="hljs-keyword">if</span> available</span><br>if [ -r /etc/default/nginx ]; then<br>. /etc/default/nginx<br>fi<br><br>STOP_SCHEDULE=&quot;$&#123;STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5&#125;&quot;<br><br>test -x $DAEMON || exit 0<br><br>. /lib/init/vars.sh<br>. /lib/lsb/init-functions<br><br><span class="hljs-meta">#</span><span class="bash"> Try to extract nginx pidfile</span><br>PID=$(cat /etc/nginx/nginx.conf | grep -Ev &#x27;^\s*#&#x27; | awk &#x27;BEGIN &#123; RS=&quot;[;&#123;&#125;]&quot; &#125; &#123; if ($1 == &quot;pid&quot;) print $2 &#125;&#x27; | head -n1)<br>if [ -z &quot;$PID&quot; ]; then<br>PID=/run/nginx.pid<br>fi<br><br>if [ -n &quot;$ULIMIT&quot; ]; then<br><span class="hljs-meta">#</span><span class="bash"> Set <span class="hljs-built_in">ulimit</span> <span class="hljs-keyword">if</span> it is <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /etc/default/nginx</span><br>ulimit $ULIMIT<br>fi<br><br>start_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Start the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Returns:</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been started</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be started</span><br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test &gt; /dev/null \<br>|| return 1<br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \<br><span class="hljs-meta">$</span><span class="bash">DAEMON_OPTS 2&gt;/dev/null \</span><br><span class="bash">|| <span class="hljs-built_in">return</span> 2</span><br>&#125;<br><br>test_config() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Test the nginx configuration</span><br><span class="hljs-meta">$</span><span class="bash">DAEMON -t <span class="hljs-variable">$DAEMON_OPTS</span> &gt;/dev/null 2&gt;&amp;1</span><br>&#125;<br><br>stop_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Stops the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been stopped</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already stopped</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be stopped</span><br><span class="hljs-meta">#</span><span class="bash">   other <span class="hljs-keyword">if</span> a failure occurred</span><br>start-stop-daemon --stop --quiet --retry=$STOP_SCHEDULE --pidfile $PID --name $NAME<br>RETVAL=&quot;$?&quot;<br>sleep 1<br>return &quot;$RETVAL&quot;<br>&#125;<br><br>reload_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Function that sends a SIGHUP to the daemon/service</span><br>start-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>rotate_logs() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Rotate <span class="hljs-built_in">log</span> files</span><br>start-stop-daemon --stop --signal USR1 --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>upgrade_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Online upgrade nginx executable</span><br><span class="hljs-meta">#</span><span class="bash"> http://nginx.org/en/docs/control.html</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> nginx has been successfully upgraded</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> nginx is not running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> the pid files were not created on time</span><br><span class="hljs-meta">#</span><span class="bash">   3 <span class="hljs-keyword">if</span> the old master could not be killed</span><br>if start-stop-daemon --stop --signal USR2 --quiet --pidfile $PID --name $NAME; then<br><span class="hljs-meta">#</span><span class="bash"> Wait <span class="hljs-keyword">for</span> both old and new master to write their pid file</span><br>while [ ! -s &quot;$&#123;PID&#125;.oldbin&quot; ] || [ ! -s &quot;$&#123;PID&#125;&quot; ]; do<br>cnt=`expr $cnt + 1`<br>if [ $cnt -gt 10 ]; then<br>return 2<br>fi<br>sleep 1<br>done<br><span class="hljs-meta">#</span><span class="bash"> Everything is ready, gracefully stop the old master</span><br>if start-stop-daemon --stop --signal QUIT --quiet --pidfile &quot;$&#123;PID&#125;.oldbin&quot; --name $NAME; then<br>return 0<br>else<br>return 3<br>fi<br>else<br>return 1<br>fi<br>&#125;<br><br>case &quot;$1&quot; in<br>start)<br>log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot;<br>start_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>stop)<br>log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot;<br>stop_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>restart)<br>log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>stop_nginx<br>case &quot;$?&quot; in<br>0|1)<br>start_nginx<br>case &quot;$?&quot; in<br>0) log_end_msg 0 ;;<br>1) log_end_msg 1 ;; # Old process is still running<br>*) log_end_msg 1 ;; # Failed to start<br>esac<br>;;<br>*)<br># Failed to stop<br>log_end_msg 1<br>;;<br>esac<br>;;<br>reload|force-reload)<br>log_daemon_msg &quot;Reloading $DESC configuration&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># This is not entirely correct since the on-disk nginx binary</span></span><br><span class="hljs-meta">#</span><span class="bash"> may differ from the in-memory one, but that<span class="hljs-string">&#x27;s not common.</span></span><br><span class="hljs-meta">#</span><span class="bash"> We prefer to check the configuration and <span class="hljs-built_in">return</span> an error</span><br><span class="hljs-meta">#</span><span class="bash"> to the administrator.</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>reload_nginx<br>log_end_msg $?<br>;;<br>configtest|testconfig)<br>log_daemon_msg &quot;Testing $DESC configuration&quot;<br>test_config<br>log_end_msg $?<br>;;<br>status)<br>status_of_proc -p $PID &quot;$DAEMON&quot; &quot;$NAME&quot; &amp;&amp; exit 0 || exit $?<br>;;<br>upgrade)<br>log_daemon_msg &quot;Upgrading binary&quot; &quot;$NAME&quot;<br>upgrade_nginx<br>log_end_msg $?<br>;;<br>rotate)<br>log_daemon_msg &quot;Re-opening $DESC log files&quot; &quot;$NAME&quot;<br>rotate_logs<br>log_end_msg $?<br>;;<br>*)<br>echo &quot;Usage: $NAME &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;&quot; &gt;&amp;2<br>exit 3<br>;;<br>esac<br><br></code></pre></td></tr></table></figure><p>还有一个好处，创建好的文件由于放在/usr/sbin目录下，所以能直接在终端中使用nginx命令而无需指定路径。</p><h2 id="1-2-测试安装是否成功"><a href="#1-2-测试安装是否成功" class="headerlink" title="1.2 测试安装是否成功"></a>1.2 测试安装是否成功</h2><p>在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -t<br></code></pre></td></tr></table></figure><p>窗口显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br></code></pre></td></tr></table></figure><p>在浏览器中输入ip地址：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519123550.png"></p><h2 id="1-3-卸载"><a href="#1-3-卸载" class="headerlink" title="1.3 卸载"></a>1.3 卸载</h2><h3 id="1-停止nginx服务"><a href="#1-停止nginx服务" class="headerlink" title="1. 停止nginx服务"></a>1. 停止nginx服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx stop<br></code></pre></td></tr></table></figure><h3 id="2-删除nginx，-purge包括配置文件"><a href="#2-删除nginx，-purge包括配置文件" class="headerlink" title="2. 删除nginx，-purge包括配置文件"></a>2. 删除nginx，-purge包括配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get --purge remove nginx<br></code></pre></td></tr></table></figure><h3 id="3-移除全部不使用的软件包"><a href="#3-移除全部不使用的软件包" class="headerlink" title="3. 移除全部不使用的软件包"></a>3. 移除全部不使用的软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get autoremove<br></code></pre></td></tr></table></figure><h3 id="4-罗列出与nginx相关的软件并删除"><a href="#4-罗列出与nginx相关的软件并删除" class="headerlink" title="4. 罗列出与nginx相关的软件并删除"></a>4. 罗列出与nginx相关的软件并删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg --get-selections|grep nginx<br>sudo apt-get --purge remove nginx<br>sudo apt-get --purge remove nginx-common<br>sudo apt-get --purge remove nginx-core<br></code></pre></td></tr></table></figure><h3 id="5-查看nginx正在运行的进程，如果有就kill掉"><a href="#5-查看nginx正在运行的进程，如果有就kill掉" class="headerlink" title="5. 查看nginx正在运行的进程，如果有就kill掉"></a>5. 查看nginx正在运行的进程，如果有就kill掉</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef |grep nginx<br>sudo kill -9 XXX<br></code></pre></td></tr></table></figure><h1 id="2-通过源码包编译安装"><a href="#2-通过源码包编译安装" class="headerlink" title="2. 通过源码包编译安装"></a>2. 通过源码包编译安装</h1><p>这种方式可以自定安装指定的模块以及最新的版本。方式更灵活。</p><p>官方下载页面：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p>configure配置文件详解：<a href="http://nginx.org/en/docs/configure.html">http://nginx.org/en/docs/configure.html</a></p><h2 id="1-安装各种依赖库"><a href="#1-安装各种依赖库" class="headerlink" title="1. 安装各种依赖库"></a>1. 安装各种依赖库</h2><p> 安装gcc g++的依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install build-essential<br>sudo apt-get install libtool<br></code></pre></td></tr></table></figure><p>安装pcre依赖库（<a href="http://www.pcre.org/%EF%BC%89">http://www.pcre.org/）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install libpcre3 libpcre3-dev<br></code></pre></td></tr></table></figure><p>安装zlib依赖库（<a href="http://www.zlib.net/">http://www.zlib.net</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install zlib1g-dev<br></code></pre></td></tr></table></figure><p>安装SSL依赖库（18.04默认已经安装了）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install openssl<br></code></pre></td></tr></table></figure><h2 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2. 安装Nginx"></a>2. 安装Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">下载最新版本：</span><br>wget http://nginx.org/download/nginx-1.13.6.tar.gz<br><span class="hljs-meta">#</span><span class="bash">解压：</span><br>tar -zxvf nginx-1.13.6.tar.gz<br><span class="hljs-meta">#</span><span class="bash">进入解压目录：</span><br>cd nginx-1.13.6<br><span class="hljs-meta">#</span><span class="bash">配置：</span><br>./configure --prefix=/usr/local/nginx <br><span class="hljs-meta">#</span><span class="bash">编译：</span><br>make<br><span class="hljs-meta">#</span><span class="bash">安装：</span><br>sudo make install<br><span class="hljs-meta">#</span><span class="bash">启动：</span><br>sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过-h查看帮助命令。<br><span class="hljs-meta">#</span><span class="bash">查看进程：</span><br>ps -ef | grep nginx<br></code></pre></td></tr></table></figure><h2 id="3-配置软链接"><a href="#3-配置软链接" class="headerlink" title="3. 配置软链接"></a>3. 配置软链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx<br></code></pre></td></tr></table></figure><p>现在就可以不用路径直接输入nginx启动。</p><h2 id="4-配置开机启动服务"><a href="#4-配置开机启动服务" class="headerlink" title="4. 配置开机启动服务"></a>4. 配置开机启动服务</h2><p>在/etc/init.d/下创建nginx文件，sudo vim /etc/init.d/nginx，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## BEGIN INIT INFO</span></span><br><span class="hljs-meta">#</span><span class="bash"> Provides:  nginx</span><br><span class="hljs-meta">#</span><span class="bash"> Required-Start:    <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Required-Stop:     <span class="hljs-variable">$local_fs</span> <span class="hljs-variable">$remote_fs</span> <span class="hljs-variable">$network</span> <span class="hljs-variable">$syslog</span> <span class="hljs-variable">$named</span></span><br><span class="hljs-meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span><br><span class="hljs-meta">#</span><span class="bash"> Default-Stop:      0 1 6</span><br><span class="hljs-meta">#</span><span class="bash"> Short-Description: starts the nginx web server</span><br><span class="hljs-meta">#</span><span class="bash"> Description:       starts nginx using start-stop-daemon</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## END INIT INFO</span></span><br><br>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<br>DAEMON=/usr/sbin/nginx<br>NAME=nginx<br>DESC=nginx<br><br><span class="hljs-meta">#</span><span class="bash"> Include nginx defaults <span class="hljs-keyword">if</span> available</span><br>if [ -r /etc/default/nginx ]; then<br>. /etc/default/nginx<br>fi<br><br>STOP_SCHEDULE=&quot;$&#123;STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5&#125;&quot;<br><br>test -x $DAEMON || exit 0<br><br>. /lib/init/vars.sh<br>. /lib/lsb/init-functions<br><br><span class="hljs-meta">#</span><span class="bash"> Try to extract nginx pidfile</span><br>PID=$(cat /etc/nginx/nginx.conf | grep -Ev &#x27;^\s*#&#x27; | awk &#x27;BEGIN &#123; RS=&quot;[;&#123;&#125;]&quot; &#125; &#123; if ($1 == &quot;pid&quot;) print $2 &#125;&#x27; | head -n1)<br>if [ -z &quot;$PID&quot; ]; then<br>PID=/run/nginx.pid<br>fi<br><br>if [ -n &quot;$ULIMIT&quot; ]; then<br><span class="hljs-meta">#</span><span class="bash"> Set <span class="hljs-built_in">ulimit</span> <span class="hljs-keyword">if</span> it is <span class="hljs-built_in">set</span> <span class="hljs-keyword">in</span> /etc/default/nginx</span><br>ulimit $ULIMIT<br>fi<br><br>start_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Start the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Returns:</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been started</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be started</span><br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test &gt; /dev/null \<br>|| return 1<br>start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON -- \<br><span class="hljs-meta">$</span><span class="bash">DAEMON_OPTS 2&gt;/dev/null \</span><br><span class="bash">|| <span class="hljs-built_in">return</span> 2</span><br>&#125;<br><br>test_config() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Test the nginx configuration</span><br><span class="hljs-meta">$</span><span class="bash">DAEMON -t <span class="hljs-variable">$DAEMON_OPTS</span> &gt;/dev/null 2&gt;&amp;1</span><br>&#125;<br><br>stop_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Stops the daemon/service</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> daemon has been stopped</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> daemon was already stopped</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> daemon could not be stopped</span><br><span class="hljs-meta">#</span><span class="bash">   other <span class="hljs-keyword">if</span> a failure occurred</span><br>start-stop-daemon --stop --quiet --retry=$STOP_SCHEDULE --pidfile $PID --name $NAME<br>RETVAL=&quot;$?&quot;<br>sleep 1<br>return &quot;$RETVAL&quot;<br>&#125;<br><br>reload_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Function that sends a SIGHUP to the daemon/service</span><br>start-stop-daemon --stop --signal HUP --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>rotate_logs() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Rotate <span class="hljs-built_in">log</span> files</span><br>start-stop-daemon --stop --signal USR1 --quiet --pidfile $PID --name $NAME<br>return 0<br>&#125;<br><br>upgrade_nginx() &#123;<br><span class="hljs-meta">#</span><span class="bash"> Online upgrade nginx executable</span><br><span class="hljs-meta">#</span><span class="bash"> http://nginx.org/en/docs/control.html</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># Return</span></span><br><span class="hljs-meta">#</span><span class="bash">   0 <span class="hljs-keyword">if</span> nginx has been successfully upgraded</span><br><span class="hljs-meta">#</span><span class="bash">   1 <span class="hljs-keyword">if</span> nginx is not running</span><br><span class="hljs-meta">#</span><span class="bash">   2 <span class="hljs-keyword">if</span> the pid files were not created on time</span><br><span class="hljs-meta">#</span><span class="bash">   3 <span class="hljs-keyword">if</span> the old master could not be killed</span><br>if start-stop-daemon --stop --signal USR2 --quiet --pidfile $PID --name $NAME; then<br><span class="hljs-meta">#</span><span class="bash"> Wait <span class="hljs-keyword">for</span> both old and new master to write their pid file</span><br>while [ ! -s &quot;$&#123;PID&#125;.oldbin&quot; ] || [ ! -s &quot;$&#123;PID&#125;&quot; ]; do<br>cnt=`expr $cnt + 1`<br>if [ $cnt -gt 10 ]; then<br>return 2<br>fi<br>sleep 1<br>done<br><span class="hljs-meta">#</span><span class="bash"> Everything is ready, gracefully stop the old master</span><br>if start-stop-daemon --stop --signal QUIT --quiet --pidfile &quot;$&#123;PID&#125;.oldbin&quot; --name $NAME; then<br>return 0<br>else<br>return 3<br>fi<br>else<br>return 1<br>fi<br>&#125;<br><br>case &quot;$1&quot; in<br>start)<br>log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot;<br>start_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>stop)<br>log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot;<br>stop_nginx<br>case &quot;$?&quot; in<br>0|1) log_end_msg 0 ;;<br>2)   log_end_msg 1 ;;<br>esac<br>;;<br>restart)<br>log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>stop_nginx<br>case &quot;$?&quot; in<br>0|1)<br>start_nginx<br>case &quot;$?&quot; in<br>0) log_end_msg 0 ;;<br>1) log_end_msg 1 ;; # Old process is still running<br>*) log_end_msg 1 ;; # Failed to start<br>esac<br>;;<br>*)<br># Failed to stop<br>log_end_msg 1<br>;;<br>esac<br>;;<br>reload|force-reload)<br>log_daemon_msg &quot;Reloading $DESC configuration&quot; &quot;$NAME&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> Check configuration before stopping nginx</span><br><span class="hljs-meta">#</span><br><span class="bash"><span class="hljs-comment"># This is not entirely correct since the on-disk nginx binary</span></span><br><span class="hljs-meta">#</span><span class="bash"> may differ from the in-memory one, but that<span class="hljs-string">&#x27;s not common.</span></span><br><span class="hljs-meta">#</span><span class="bash"> We prefer to check the configuration and <span class="hljs-built_in">return</span> an error</span><br><span class="hljs-meta">#</span><span class="bash"> to the administrator.</span><br>if ! test_config; then<br>log_end_msg 1 # Configuration error<br>exit $?<br>fi<br><br>reload_nginx<br>log_end_msg $?<br>;;<br>configtest|testconfig)<br>log_daemon_msg &quot;Testing $DESC configuration&quot;<br>test_config<br>log_end_msg $?<br>;;<br>status)<br>status_of_proc -p $PID &quot;$DAEMON&quot; &quot;$NAME&quot; &amp;&amp; exit 0 || exit $?<br>;;<br>upgrade)<br>log_daemon_msg &quot;Upgrading binary&quot; &quot;$NAME&quot;<br>upgrade_nginx<br>log_end_msg $?<br>;;<br>rotate)<br>log_daemon_msg &quot;Re-opening $DESC log files&quot; &quot;$NAME&quot;<br>rotate_logs<br>log_end_msg $?<br>;;<br>*)<br>echo &quot;Usage: $NAME &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;&quot; &gt;&amp;2<br>exit 3<br>;;<br>esac<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">设置服务脚本有执行权限</span><br>sudo chmod +x /etc/init.d/nginx<br><span class="hljs-meta">#</span><span class="bash">注册服务<span class="hljs-built_in">cd</span> /etc/init.d/</span><br>sudo update-rc.d nginx defaults<br></code></pre></td></tr></table></figure><p>现在基本上就可以开机启动了，常用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service nginx &#123;start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2021/02/21/Nginx/04-Nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%B8%80">1. 反向代理实例一</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a><ul><li><a href="#1-%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA-tomcat%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5-1270018080%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2">1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</a></li><li><a href="#2-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0-host-%E6%96%87%E4%BB%B6%E5%B0%86-www123com-%E6%98%A0%E5%B0%84%E5%88%B0-127001">2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1</a></li><li><a href="#3-%E5%9C%A8-nginxconf-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E5%A2%9E%E5%8A%A0%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE">3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></a></li></ul></li></ul></li><li><a href="#2-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B%E4%BA%8C">2. 反向代理实例二</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B-1">实现过程</a><ul><li><a href="#1%E5%87%86%E5%A4%87%E4%B8%A4%E4%B8%AA-tomcat%E4%B8%80%E4%B8%AA-8001-%E7%AB%AF%E5%8F%A3%E4%B8%80%E4%B8%AA-8002-%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%87%86%E5%A4%87%E5%A5%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E9%A1%B5%E9%9D%A2">1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</a></li><li><a href="#2-%E4%BF%AE%E6%94%B9-nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%9C%A8-http-%E5%9D%97%E4%B8%AD%E6%B7%BB%E5%8A%A0-server">2. 修改 nginx 的配置文件在 http 块中添加 server{}</a></li></ul></li></ul></li></ul><h1 id="1-反向代理实例一"><a href="#1-反向代理实例一" class="headerlink" title="1. 反向代理实例一"></a>1. 反向代理实例一</h1><p>实现效果：使用 nginx 反向代理，访问 <a href="http://www.123.com/">www.123.com</a> 直接跳转到 127.0.0.1:8080</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-启动一个-tomcat，浏览器地址栏输入-127-0-0-1-8080，出现如下界面"><a href="#1-启动一个-tomcat，浏览器地址栏输入-127-0-0-1-8080，出现如下界面" class="headerlink" title="1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面"></a>1. 启动一个 tomcat，浏览器地址栏输入 127.0.0.1:8080，出现如下界面</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173446.png"></p><h3 id="2-通过修改本地-host-文件，将-www-123-com-映射到-127-0-0-1"><a href="#2-通过修改本地-host-文件，将-www-123-com-映射到-127-0-0-1" class="headerlink" title="2. 通过修改本地 host 文件，将 www.123.com 映射到 127.0.0.1"></a>2. 通过修改本地 host 文件，将 <a href="http://www.123.com/">www.123.com</a> 映射到 127.0.0.1</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173537.png"></p><p>配置完成之后，我们便可以通过 <a href="http://www.123.com:8080/">www.123.com:8080</a> 访问到第一步出现的 Tomcat 初始界面。那么如何只需要输入 <a href="http://www.123.com/">www.123.com</a> 便可以跳转到 Tomcat 初始界面呢？便用到 nginx 的反向代理。</p><h3 id="3-在-nginx-conf-配置文件中增加如下配置"><a href="#3-在-nginx-conf-配置文件中增加如下配置" class="headerlink" title="3. 在 nginx.conf 配置文件中增加如下配置"></a>3. <strong>在 nginx.conf 配置文件中增加如下配置</strong></h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173630.png"></p><p>如上配置，我们监听 80 端口，访问域名为 <a href="http://www.123.com,不加端口号时默认为/">www.123.com，不加端口号时默认为</a> 80 端口，故访问该域名时会跳转到 127.0.0.1:8080 路径上。在浏览器端输入 <a href="http://www.123.com/">www.123.com</a> 结果如下：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173703.png"></p><h1 id="2-反向代理实例二"><a href="#2-反向代理实例二" class="headerlink" title="2. 反向代理实例二"></a>2. 反向代理实例二</h1><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中 nginx 监听端口为 9001，</p><blockquote><p>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8081 </p><p>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8082</p></blockquote><h2 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-准备两个-tomcat，一个-8001-端口，一个-8002-端口，并准备好测试的页面"><a href="#1-准备两个-tomcat，一个-8001-端口，一个-8002-端口，并准备好测试的页面" class="headerlink" title="1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面"></a>1.准备两个 tomcat，一个 8001 端口，一个 8002 端口，并准备好测试的页面</h3><h3 id="2-修改-nginx-的配置文件在-http-块中添加-server"><a href="#2-修改-nginx-的配置文件在-http-块中添加-server" class="headerlink" title="2. 修改 nginx 的配置文件在 http 块中添加 server{}"></a>2. 修改 nginx 的配置文件在 http 块中添加 server{}</h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521173939.png"></p><p><strong>location</strong> <strong>指令说明</strong>   该指令用于匹配 URL。</p><p>语法如下：</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200521174037.png"></p><ol><li>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</li><li>~：用于表示 uri 包含正则表达式，并且区分大小写。</li><li>~*：用于表示 uri 包含正则表达式，并且不区分大小写。</li><li>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</li></ol><p>*<em>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~</em> 标识。**</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/02/21/03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">1. 常用命令</a><ul><li><a href="#1-%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC">1. 查看版本</a></li><li><a href="#2-%E6%9F%A5%E7%9C%8B-nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">2. 查看 Nginx 配置语法的正确性</a></li><li><a href="#3-%E4%B8%BAnginx%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3. 为Nginx指定一个配置文件</a></li><li><a href="#4-%E5%90%AF%E5%8A%A8-nginx-%E6%9C%8D%E5%8A%A1">4. 启动 Nginx 服务</a></li><li><a href="#5-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8">5. 开机自启动</a></li><li><a href="#6-%E9%87%8D%E5%90%AF-nginx-%E6%9C%8D%E5%8A%A1">6. 重启 Nginx 服务</a></li><li><a href="#7-%E6%9F%A5%E7%9C%8B-nginx-%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81">7. 查看 Nginx 服务状态</a></li><li><a href="#8-%E9%87%8D%E8%BD%BD-nginx-%E6%9C%8D%E5%8A%A1">8. 重载 Nginx 服务</a></li><li><a href="#9-%E5%81%9C%E6%AD%A2-nginx-%E6%9C%8D%E5%8A%A1">9. 停止 Nginx 服务</a></li><li><a href="#10-%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9">10. 查看命令帮助</a></li></ul></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 配置文件</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%85%A8%E5%B1%80%E5%9D%97">第一部分：全局块</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86events-%E5%9D%97">第二部分：events 块</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86http-%E5%9D%97">第三部分：http 块</a><ul><li><a href="#1-http%E5%85%A8%E5%B1%80%E5%9D%97">1. http全局块</a></li><li><a href="#2-server%E5%9D%97">2. server块</a><ul><li><a href="#1%E5%85%A8%E5%B1%80-server-%E5%9D%97">1.全局 server 块</a></li><li><a href="#2-location%E5%9D%97">2. location块</a></li></ul></li></ul></li><li><a href="#nginxconf-%E8%AF%A6%E7%BB%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D">nginx.conf 详细的配置文件介绍</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h1 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h1><p>以下命令nginx已经通过apt安装好了，有nginx命令。</p><h2 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title="1. 查看版本"></a>1. 查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -v<br></code></pre></td></tr></table></figure><p>如果你想同时看到更详细的配置项，使用 -V</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -V<br></code></pre></td></tr></table></figure><h2 id="2-查看-Nginx-配置语法的正确性"><a href="#2-查看-Nginx-配置语法的正确性" class="headerlink" title="2. 查看 Nginx 配置语法的正确性"></a>2. 查看 Nginx 配置语法的正确性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -t<br></code></pre></td></tr></table></figure><p>这里如果用大写 T，效果就是 测试、丢弃并退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -T<br></code></pre></td></tr></table></figure><h2 id="3-为Nginx指定一个配置文件"><a href="#3-为Nginx指定一个配置文件" class="headerlink" title="3. 为Nginx指定一个配置文件"></a>3. 为Nginx指定一个配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -c &lt;/path/config&gt; #为Nginx指定一个配置文件，来代替缺省值conf/nginx.conf<br></code></pre></td></tr></table></figure><h2 id="4-启动-Nginx-服务"><a href="#4-启动-Nginx-服务" class="headerlink" title="4. 启动 Nginx 服务"></a>4. 启动 Nginx 服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start nginx #systemd<br>OR<br>sudo service nginx start   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="5-开机自启动"><a href="#5-开机自启动" class="headerlink" title="5. 开机自启动"></a>5. 开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable nginx #systemd<br>或<br>sudo service nginx enable   #sysv init<br></code></pre></td></tr></table></figure><h2 id="6-重启-Nginx-服务"><a href="#6-重启-Nginx-服务" class="headerlink" title="6. 重启 Nginx 服务"></a>6. 重启 Nginx 服务</h2><p>重启的意思是，停止 然后 启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl restart nginx #systemd<br>或<br>sudo service nginx restart   #sysv init<br></code></pre></td></tr></table></figure><h2 id="7-查看-Nginx-服务状态"><a href="#7-查看-Nginx-服务状态" class="headerlink" title="7. 查看 Nginx 服务状态"></a>7. 查看 Nginx 服务状态</h2><p>这条是看运行时的服务状态信息的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl status nginx #systemd<br>或<br>sudo service nginx status   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="8-重载-Nginx-服务"><a href="#8-重载-Nginx-服务" class="headerlink" title="8. 重载 Nginx 服务"></a>8. 重载 Nginx 服务</h2><p>重载是重新加载 配置文件，看命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl reload nginx #systemd<br>或<br>sudo service nginx reload   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="9-停止-Nginx-服务"><a href="#9-停止-Nginx-服务" class="headerlink" title="9. 停止 Nginx 服务"></a>9. 停止 Nginx 服务</h2><p>不管你是什么原因想停了它，都可以用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop nginx #systemd<br>OR<br>sudo service nginx stop   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="10-查看命令帮助"><a href="#10-查看命令帮助" class="headerlink" title="10. 查看命令帮助"></a>10. 查看命令帮助</h2><p>如果还有什么不懂，或者想知道其他命令，就用这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl -h nginx<br></code></pre></td></tr></table></figure><h1 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h1><p>nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132450.png"></p><h2 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h2><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p><p>比如上面第一行配置的：</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132657.png"></p><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p><h2 id="第二部分：events-块"><a href="#第二部分：events-块" class="headerlink" title="第二部分：events 块"></a>第二部分：events 块</h2><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132920.png"></p><p>上述例子就表示每个 work process 支持的最大连接数为 1024. 这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h2 id="第三部分：http-块"><a href="#第三部分：http-块" class="headerlink" title="第三部分：http 块"></a>第三部分：http 块</h2><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><p>需要注意的是：http 块也可以包括 <strong>http</strong> <strong>全局块</strong>、<strong>server</strong> <strong>块</strong>。</p><h3 id="1-http全局块"><a href="#1-http全局块" class="headerlink" title="1. http全局块"></a>1. http全局块</h3><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><p><strong>upstream</strong>（上游服务器设置，主要为反向代理、负载均衡相关配置，upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡</p><h3 id="2-server块"><a href="#2-server块" class="headerlink" title="2. server块"></a>2. server块</h3><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p><p>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p><h4 id="1-全局-server-块"><a href="#1-全局-server-块" class="headerlink" title="1.全局 server 块"></a>1.全局 server 块</h4><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p><h4 id="2-location块"><a href="#2-location块" class="headerlink" title="2. location块"></a>2. location块</h4><p>一个 server 块可以配置多个 location 块。</p><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><h2 id="nginx-conf-详细的配置文件介绍"><a href="#nginx-conf-详细的配置文件介绍" class="headerlink" title="nginx.conf 详细的配置文件介绍"></a>nginx.conf 详细的配置文件介绍</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#定义Nginx运行的用户和用户组</span><br><span class="hljs-attr">user</span> <span class="hljs-string">www www; </span><br><br><span class="hljs-comment">#nginx进程数，通常设置成和cpu的数量相等</span><br><span class="hljs-attr">worker_processes</span> <span class="hljs-string">4; </span><br><br><span class="hljs-comment">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><br><span class="hljs-comment">#进程pid文件</span><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-comment">#指定进程可以打开的最大描述符：数目</span><br><span class="hljs-comment">#工作模式与连接数上限</span><br><span class="hljs-comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="hljs-comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="hljs-attr">worker_rlimit_nofile</span> <span class="hljs-string">65535;</span><br><br><br><span class="hljs-attr">events</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="hljs-comment">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="hljs-comment">    #补充说明：</span><br><span class="hljs-comment">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="hljs-comment">    #A）标准事件模型</span><br><span class="hljs-comment">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="hljs-comment">    #B）高效事件模型</span><br><span class="hljs-comment">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="hljs-comment">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="hljs-comment">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="hljs-comment">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br>    <span class="hljs-attr">use</span> <span class="hljs-string">epoll</span><br>    <br>    <br><span class="hljs-comment">    #单个进程最大连接数（最大连接数=连接数+进程数）</span><br><span class="hljs-comment">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span><br>    <span class="hljs-attr">worker_connections</span>  <span class="hljs-string">1024;</span><br>    <br><span class="hljs-comment">    #keepalive 超时时间</span><br>    <span class="hljs-attr">keepalive_timeout</span> <span class="hljs-string">60;</span><br>    <br><span class="hljs-comment">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="hljs-comment">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="hljs-comment">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="hljs-comment">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br>    <span class="hljs-attr">client_header_buffer_size</span> <span class="hljs-string">4k;</span><br>    <br><span class="hljs-comment">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br>    <span class="hljs-attr">open_file_cache</span> <span class="hljs-string">max=65535 inactive=60s;</span><br>    <br>    <br><span class="hljs-comment">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="hljs-comment">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br>    <span class="hljs-attr">open_file_cache_valid</span> <span class="hljs-string">80s;</span><br>    <br>    <br><span class="hljs-comment">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="hljs-comment">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br>    <span class="hljs-attr">open_file_cache_min_uses</span> <span class="hljs-string">1;</span><br>    <br><span class="hljs-comment">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br>    <span class="hljs-attr">open_file_cache_errors</span> <span class="hljs-string">on;</span><br><span class="hljs-attr">&#125;</span><br><br><br><span class="hljs-comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="hljs-attr">http&#123;</span><br><span class="hljs-comment">    #文件扩展名与文件类型映射表</span><br>    <span class="hljs-attr">include</span> <span class="hljs-string">mime.types;</span><br>    <br><span class="hljs-comment">    #默认文件类型</span><br>    <span class="hljs-attr">default_type</span> <span class="hljs-string">application/octet-stream;</span><br>    <br><span class="hljs-comment">    #默认编码</span><br>    <span class="hljs-attr">charset</span> <span class="hljs-string">utf-8;</span><br>    <br><span class="hljs-comment">    #服务器名字的hash表大小</span><br><span class="hljs-comment">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br>    <span class="hljs-attr">server_names_hash_bucket_size</span> <span class="hljs-string">128;</span><br>    <br><span class="hljs-comment">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br>    <span class="hljs-attr">client_header_buffer_size</span> <span class="hljs-string">32k;</span><br>    <br><span class="hljs-comment">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br>    <span class="hljs-attr">large_client_header_buffers</span> <span class="hljs-string">4 64k;</span><br>    <br><span class="hljs-comment">    #设定通过nginx上传文件的大小</span><br>    <span class="hljs-attr">client_max_body_size</span> <span class="hljs-string">8m;</span><br>    <br><span class="hljs-comment">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="hljs-comment">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br>    <span class="hljs-attr">sendfile</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">     #开启目录列表访问，合适下载服务器，默认关闭。</span><br>    <span class="hljs-attr">autoindex</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br>    <span class="hljs-attr">tcp_nopush</span> <span class="hljs-string">on;</span><br>     <br>    <span class="hljs-attr">tcp_nodelay</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">    #长连接超时时间，单位是秒</span><br>    <span class="hljs-attr">keepalive_timeout</span> <span class="hljs-string">120;</span><br>    <br><span class="hljs-comment">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br>    <span class="hljs-attr">fastcgi_connect_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_send_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_read_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_buffer_size</span> <span class="hljs-string">64k;</span><br>    <span class="hljs-attr">fastcgi_buffers</span> <span class="hljs-string">4 64k;</span><br>    <span class="hljs-attr">fastcgi_busy_buffers_size</span> <span class="hljs-string">128k;</span><br>    <span class="hljs-attr">fastcgi_temp_file_write_size</span> <span class="hljs-string">128k;</span><br>    <br><span class="hljs-comment">    #gzip模块设置</span><br>    <span class="hljs-attr">gzip</span> <span class="hljs-string">on; #开启gzip压缩输出</span><br>    <span class="hljs-attr">gzip_min_length</span> <span class="hljs-string">1k;    #最小压缩文件大小</span><br>    <span class="hljs-attr">gzip_buffers</span> <span class="hljs-string">4 16k;    #压缩缓冲区</span><br>    <span class="hljs-attr">gzip_http_version</span> <span class="hljs-string">1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br>    <span class="hljs-attr">gzip_comp_level</span> <span class="hljs-string">2;     #压缩等级</span><br>    <span class="hljs-attr">gzip_types</span> <span class="hljs-string">text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br>    <span class="hljs-attr">gzip_vary</span> <span class="hljs-string">on;</span><br><br><span class="hljs-comment">    #开启限制IP连接数的时候需要使用</span><br><span class="hljs-comment">    #limit_zone crawler $binary_remote_addr 10m;</span><br>    <br>    <br><span class="hljs-comment">    #负载均衡配置</span><br>    <span class="hljs-attr">upstream</span> <span class="hljs-string">piao.jd.com &#123;</span><br>     <br><span class="hljs-comment">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.121:80 weight=3;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.122:80 weight=2;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.123:80 weight=3;</span><br><br><span class="hljs-comment">        #nginx的upstream目前支持4种方式的分配</span><br><span class="hljs-comment">        #1、轮询（默认）</span><br><span class="hljs-comment">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="hljs-comment">        #2、weight</span><br><span class="hljs-comment">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="hljs-comment">        #例如：</span><br><span class="hljs-comment">        #upstream bakend &#123;</span><br><span class="hljs-comment">        #    server 192.168.0.14 weight=10;</span><br><span class="hljs-comment">        #    server 192.168.0.15 weight=10;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #2、ip_hash</span><br><span class="hljs-comment">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="hljs-comment">        #例如：</span><br><span class="hljs-comment">        #upstream bakend &#123;</span><br><span class="hljs-comment">        #    ip_hash;</span><br><span class="hljs-comment">        #    server 192.168.0.14:88;</span><br><span class="hljs-comment">        #    server 192.168.0.15:80;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #3、fair（第三方）</span><br><span class="hljs-comment">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="hljs-comment">        #upstream backend &#123;</span><br><span class="hljs-comment">        #    server server1;</span><br><span class="hljs-comment">        #    server server2;</span><br><span class="hljs-comment">        #    fair;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #4、url_hash（第三方）</span><br><span class="hljs-comment">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="hljs-comment">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="hljs-comment">        #upstream backend &#123;</span><br><span class="hljs-comment">        #    server squid1:3128;</span><br><span class="hljs-comment">        #    server squid2:3128;</span><br><span class="hljs-comment">        #    hash $request_uri;</span><br><span class="hljs-comment">        #    hash_method crc32;</span><br><span class="hljs-comment">        #&#125;</span><br><br><span class="hljs-comment">        #tips:</span><br><span class="hljs-comment">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="hljs-comment">        #    ip_hash;</span><br><span class="hljs-comment">        #    server 127.0.0.1:9090 down;</span><br><span class="hljs-comment">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="hljs-comment">        #    server 127.0.0.1:6060;</span><br><span class="hljs-comment">        #    server 127.0.0.1:7070 backup;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><br><span class="hljs-comment">        #每个设备的状态设置为:</span><br><span class="hljs-comment">        #1.down表示单前的server暂时不参与负载</span><br><span class="hljs-comment">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="hljs-comment">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="hljs-comment">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="hljs-comment">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><br><span class="hljs-comment">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="hljs-comment">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="hljs-comment">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="hljs-comment">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br>    <span class="hljs-attr">&#125;</span><br>    <br>    <br><span class="hljs-comment">    #虚拟主机的配置</span><br>    <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">        #监听端口</span><br>        <span class="hljs-attr">listen</span> <span class="hljs-string">80;</span><br><br><span class="hljs-comment">        #域名可以有多个，用空格隔开</span><br>        <span class="hljs-attr">server_name</span> <span class="hljs-string">www.jd.com jd.com;</span><br><span class="hljs-comment">        #默认入口文件名称</span><br>        <span class="hljs-attr">index</span> <span class="hljs-string">index.html index.htm index.php;</span><br>        <span class="hljs-attr">root</span> <span class="hljs-string">/data/www/jd;</span><br><br><span class="hljs-comment">        #对******进行负载均衡</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(php|php5)?$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">fastcgi_pass</span> <span class="hljs-string">127.0.0.1:9000;</span><br>            <span class="hljs-attr">fastcgi_index</span> <span class="hljs-string">index.php;</span><br>            <span class="hljs-attr">include</span> <span class="hljs-string">fastcgi.conf;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #图片缓存时间设置</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">expires</span> <span class="hljs-string">10d;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #JS和CSS缓存时间设置</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(js|css)?$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">expires</span> <span class="hljs-string">1h;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #日志格式设定</span><br><span class="hljs-comment">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="hljs-comment">        #$remote_user：用来记录客户端用户名称；</span><br><span class="hljs-comment">        #$time_local： 用来记录访问时间与时区；</span><br><span class="hljs-comment">        #$request： 用来记录请求的url与http协议；</span><br><span class="hljs-comment">        #$status： 用来记录请求状态；成功是200，</span><br><span class="hljs-comment">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="hljs-comment">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="hljs-comment">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="hljs-comment">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br>        <span class="hljs-attr">log_format</span> <span class="hljs-string">access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>        <span class="hljs-meta">&#x27;$status</span> <span class="hljs-string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>        <span class="hljs-meta">&#x27;&quot;$http_user_agent&quot;</span> <span class="hljs-string">$http_x_forwarded_for&#x27;;</span><br>         <br><span class="hljs-comment">        #定义本虚拟主机的访问日志</span><br>        <span class="hljs-attr">access_log</span>  <span class="hljs-string">/usr/local/nginx/logs/host.access.log  main;</span><br>        <span class="hljs-attr">access_log</span>  <span class="hljs-string">/usr/local/nginx/logs/host.access.404.log  log404;</span><br>         <br><span class="hljs-comment">        #对 &quot;/connect-controller&quot; 启用反向代理</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/connect-controller &#123;</span><br>            <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span><br>            <span class="hljs-attr">proxy_redirect</span> <span class="hljs-string">off;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-IP $remote_addr;</span><br>             <br><span class="hljs-comment">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>             <br><span class="hljs-comment">            #以下是一些反向代理的配置，可选。</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br><br><span class="hljs-comment">            #允许客户端请求的最大单文件字节数</span><br>            <span class="hljs-attr">client_max_body_size</span> <span class="hljs-string">10m;</span><br><br><span class="hljs-comment">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="hljs-comment">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="hljs-comment">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br>            <span class="hljs-attr">client_body_buffer_size</span> <span class="hljs-string">128k;</span><br><br><span class="hljs-comment">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br>            <span class="hljs-attr">proxy_intercept_errors</span> <span class="hljs-string">on;</span><br><br><span class="hljs-comment">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="hljs-comment">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br>            <span class="hljs-attr">proxy_connect_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="hljs-comment">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br>            <span class="hljs-attr">proxy_send_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="hljs-comment">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br>            <span class="hljs-attr">proxy_read_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="hljs-comment">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br>            <span class="hljs-attr">proxy_buffer_size</span> <span class="hljs-string">4k;</span><br><br><span class="hljs-comment">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="hljs-comment">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br>            <span class="hljs-attr">proxy_buffers</span> <span class="hljs-string">4 32k;</span><br><br><span class="hljs-comment">            #高负荷下缓冲大小（proxy_buffers*2）</span><br>            <span class="hljs-attr">proxy_busy_buffers_size</span> <span class="hljs-string">64k;</span><br><br><span class="hljs-comment">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="hljs-comment">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br>            <span class="hljs-attr">proxy_temp_file_write_size</span> <span class="hljs-string">64k;</span><br>        <span class="hljs-attr">&#125;</span><br>        <br><span class="hljs-comment">        #本地动静分离反向代理配置</span><br><span class="hljs-comment">        #所有jsp的页面均交由tomcat或resin处理</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .(jsp|jspx|do)?$ &#123;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-IP $remote_addr;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>            <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://127.0.0.1:8080;</span><br>        <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。</p><p>main 部分设置的指令影响其他所有部分的设置；</p><p>server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；</p><p>upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p><p>location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。</p><p>他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/Nginx/03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/02/21/Nginx/03-Nginx%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">1. 常用命令</a><ul><li><a href="#1-%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC">1. 查看版本</a></li><li><a href="#2-%E6%9F%A5%E7%9C%8B-nginx-%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">2. 查看 Nginx 配置语法的正确性</a></li><li><a href="#3-%E4%B8%BAnginx%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3. 为Nginx指定一个配置文件</a></li><li><a href="#4-%E5%90%AF%E5%8A%A8-nginx-%E6%9C%8D%E5%8A%A1">4. 启动 Nginx 服务</a></li><li><a href="#5-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8">5. 开机自启动</a></li><li><a href="#6-%E9%87%8D%E5%90%AF-nginx-%E6%9C%8D%E5%8A%A1">6. 重启 Nginx 服务</a></li><li><a href="#7-%E6%9F%A5%E7%9C%8B-nginx-%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81">7. 查看 Nginx 服务状态</a></li><li><a href="#8-%E9%87%8D%E8%BD%BD-nginx-%E6%9C%8D%E5%8A%A1">8. 重载 Nginx 服务</a></li><li><a href="#9-%E5%81%9C%E6%AD%A2-nginx-%E6%9C%8D%E5%8A%A1">9. 停止 Nginx 服务</a></li><li><a href="#10-%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9">10. 查看命令帮助</a></li></ul></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2. 配置文件</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E5%85%A8%E5%B1%80%E5%9D%97">第一部分：全局块</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86events-%E5%9D%97">第二部分：events 块</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86http-%E5%9D%97">第三部分：http 块</a><ul><li><a href="#1-http%E5%85%A8%E5%B1%80%E5%9D%97">1. http全局块</a></li><li><a href="#2-server%E5%9D%97">2. server块</a><ul><li><a href="#1%E5%85%A8%E5%B1%80-server-%E5%9D%97">1.全局 server 块</a></li><li><a href="#2-location%E5%9D%97">2. location块</a></li></ul></li></ul></li><li><a href="#nginxconf-%E8%AF%A6%E7%BB%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D">nginx.conf 详细的配置文件介绍</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h1 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h1><p>以下命令nginx已经通过apt安装好了，有nginx命令。</p><h2 id="1-查看版本"><a href="#1-查看版本" class="headerlink" title="1. 查看版本"></a>1. 查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -v<br></code></pre></td></tr></table></figure><p>如果你想同时看到更详细的配置项，使用 -V</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -V<br></code></pre></td></tr></table></figure><h2 id="2-查看-Nginx-配置语法的正确性"><a href="#2-查看-Nginx-配置语法的正确性" class="headerlink" title="2. 查看 Nginx 配置语法的正确性"></a>2. 查看 Nginx 配置语法的正确性</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -t<br></code></pre></td></tr></table></figure><p>这里如果用大写 T，效果就是 测试、丢弃并退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -T<br></code></pre></td></tr></table></figure><h2 id="3-为Nginx指定一个配置文件"><a href="#3-为Nginx指定一个配置文件" class="headerlink" title="3. 为Nginx指定一个配置文件"></a>3. 为Nginx指定一个配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -c &lt;/path/config&gt; #为Nginx指定一个配置文件，来代替缺省值conf/nginx.conf<br></code></pre></td></tr></table></figure><h2 id="4-启动-Nginx-服务"><a href="#4-启动-Nginx-服务" class="headerlink" title="4. 启动 Nginx 服务"></a>4. 启动 Nginx 服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start nginx #systemd<br>OR<br>sudo service nginx start   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="5-开机自启动"><a href="#5-开机自启动" class="headerlink" title="5. 开机自启动"></a>5. 开机自启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable nginx #systemd<br>或<br>sudo service nginx enable   #sysv init<br></code></pre></td></tr></table></figure><h2 id="6-重启-Nginx-服务"><a href="#6-重启-Nginx-服务" class="headerlink" title="6. 重启 Nginx 服务"></a>6. 重启 Nginx 服务</h2><p>重启的意思是，停止 然后 启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl restart nginx #systemd<br>或<br>sudo service nginx restart   #sysv init<br></code></pre></td></tr></table></figure><h2 id="7-查看-Nginx-服务状态"><a href="#7-查看-Nginx-服务状态" class="headerlink" title="7. 查看 Nginx 服务状态"></a>7. 查看 Nginx 服务状态</h2><p>这条是看运行时的服务状态信息的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl status nginx #systemd<br>或<br>sudo service nginx status   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="8-重载-Nginx-服务"><a href="#8-重载-Nginx-服务" class="headerlink" title="8. 重载 Nginx 服务"></a>8. 重载 Nginx 服务</h2><p>重载是重新加载 配置文件，看命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl reload nginx #systemd<br>或<br>sudo service nginx reload   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="9-停止-Nginx-服务"><a href="#9-停止-Nginx-服务" class="headerlink" title="9. 停止 Nginx 服务"></a>9. 停止 Nginx 服务</h2><p>不管你是什么原因想停了它，都可以用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop nginx #systemd<br>OR<br>sudo service nginx stop   #sysvinit<br></code></pre></td></tr></table></figure><h2 id="10-查看命令帮助"><a href="#10-查看命令帮助" class="headerlink" title="10. 查看命令帮助"></a>10. 查看命令帮助</h2><p>如果还有什么不懂，或者想知道其他命令，就用这个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl -h nginx<br></code></pre></td></tr></table></figure><h1 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h1><p>nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132450.png"></p><h2 id="第一部分：全局块"><a href="#第一部分：全局块" class="headerlink" title="第一部分：全局块"></a>第一部分：全局块</h2><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p><p>比如上面第一行配置的：</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132657.png"></p><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes 值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p><h2 id="第二部分：events-块"><a href="#第二部分：events-块" class="headerlink" title="第二部分：events 块"></a>第二部分：events 块</h2><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。</p><p> <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200519132920.png"></p><p>上述例子就表示每个 work process 支持的最大连接数为 1024. 这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。</p><h2 id="第三部分：http-块"><a href="#第三部分：http-块" class="headerlink" title="第三部分：http 块"></a>第三部分：http 块</h2><p>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p><p>需要注意的是：http 块也可以包括 <strong>http</strong> <strong>全局块</strong>、<strong>server</strong> <strong>块</strong>。</p><h3 id="1-http全局块"><a href="#1-http全局块" class="headerlink" title="1. http全局块"></a>1. http全局块</h3><p>http 全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</p><p><strong>upstream</strong>（上游服务器设置，主要为反向代理、负载均衡相关配置，upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡</p><h3 id="2-server块"><a href="#2-server块" class="headerlink" title="2. server块"></a>2. server块</h3><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p><p>而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。</p><h4 id="1-全局-server-块"><a href="#1-全局-server-块" class="headerlink" title="1.全局 server 块"></a>1.全局 server 块</h4><p>最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。</p><h4 id="2-location块"><a href="#2-location块" class="headerlink" title="2. location块"></a>2. location块</h4><p>一个 server 块可以配置多个 location 块。</p><p>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</p><h2 id="nginx-conf-详细的配置文件介绍"><a href="#nginx-conf-详细的配置文件介绍" class="headerlink" title="nginx.conf 详细的配置文件介绍"></a>nginx.conf 详细的配置文件介绍</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#定义Nginx运行的用户和用户组</span><br><span class="hljs-attr">user</span> <span class="hljs-string">www www; </span><br><br><span class="hljs-comment">#nginx进程数，通常设置成和cpu的数量相等</span><br><span class="hljs-attr">worker_processes</span> <span class="hljs-string">4; </span><br><br><span class="hljs-comment">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><br><span class="hljs-comment">#进程pid文件</span><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-comment">#指定进程可以打开的最大描述符：数目</span><br><span class="hljs-comment">#工作模式与连接数上限</span><br><span class="hljs-comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="hljs-comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="hljs-attr">worker_rlimit_nofile</span> <span class="hljs-string">65535;</span><br><br><br><span class="hljs-attr">events</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="hljs-comment">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="hljs-comment">    #补充说明：</span><br><span class="hljs-comment">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="hljs-comment">    #A）标准事件模型</span><br><span class="hljs-comment">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="hljs-comment">    #B）高效事件模型</span><br><span class="hljs-comment">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="hljs-comment">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="hljs-comment">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="hljs-comment">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br>    <span class="hljs-attr">use</span> <span class="hljs-string">epoll</span><br>    <br>    <br><span class="hljs-comment">    #单个进程最大连接数（最大连接数=连接数+进程数）</span><br><span class="hljs-comment">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span><br>    <span class="hljs-attr">worker_connections</span>  <span class="hljs-string">1024;</span><br>    <br><span class="hljs-comment">    #keepalive 超时时间</span><br>    <span class="hljs-attr">keepalive_timeout</span> <span class="hljs-string">60;</span><br>    <br><span class="hljs-comment">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="hljs-comment">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="hljs-comment">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="hljs-comment">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br>    <span class="hljs-attr">client_header_buffer_size</span> <span class="hljs-string">4k;</span><br>    <br><span class="hljs-comment">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br>    <span class="hljs-attr">open_file_cache</span> <span class="hljs-string">max=65535 inactive=60s;</span><br>    <br>    <br><span class="hljs-comment">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="hljs-comment">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br>    <span class="hljs-attr">open_file_cache_valid</span> <span class="hljs-string">80s;</span><br>    <br>    <br><span class="hljs-comment">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="hljs-comment">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br>    <span class="hljs-attr">open_file_cache_min_uses</span> <span class="hljs-string">1;</span><br>    <br><span class="hljs-comment">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br>    <span class="hljs-attr">open_file_cache_errors</span> <span class="hljs-string">on;</span><br><span class="hljs-attr">&#125;</span><br><br><br><span class="hljs-comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="hljs-attr">http&#123;</span><br><span class="hljs-comment">    #文件扩展名与文件类型映射表</span><br>    <span class="hljs-attr">include</span> <span class="hljs-string">mime.types;</span><br>    <br><span class="hljs-comment">    #默认文件类型</span><br>    <span class="hljs-attr">default_type</span> <span class="hljs-string">application/octet-stream;</span><br>    <br><span class="hljs-comment">    #默认编码</span><br>    <span class="hljs-attr">charset</span> <span class="hljs-string">utf-8;</span><br>    <br><span class="hljs-comment">    #服务器名字的hash表大小</span><br><span class="hljs-comment">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br>    <span class="hljs-attr">server_names_hash_bucket_size</span> <span class="hljs-string">128;</span><br>    <br><span class="hljs-comment">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br>    <span class="hljs-attr">client_header_buffer_size</span> <span class="hljs-string">32k;</span><br>    <br><span class="hljs-comment">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br>    <span class="hljs-attr">large_client_header_buffers</span> <span class="hljs-string">4 64k;</span><br>    <br><span class="hljs-comment">    #设定通过nginx上传文件的大小</span><br>    <span class="hljs-attr">client_max_body_size</span> <span class="hljs-string">8m;</span><br>    <br><span class="hljs-comment">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="hljs-comment">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br>    <span class="hljs-attr">sendfile</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">     #开启目录列表访问，合适下载服务器，默认关闭。</span><br>    <span class="hljs-attr">autoindex</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">      #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br>    <span class="hljs-attr">tcp_nopush</span> <span class="hljs-string">on;</span><br>     <br>    <span class="hljs-attr">tcp_nodelay</span> <span class="hljs-string">on;</span><br>    <br><span class="hljs-comment">    #长连接超时时间，单位是秒</span><br>    <span class="hljs-attr">keepalive_timeout</span> <span class="hljs-string">120;</span><br>    <br><span class="hljs-comment">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br>    <span class="hljs-attr">fastcgi_connect_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_send_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_read_timeout</span> <span class="hljs-string">300;</span><br>    <span class="hljs-attr">fastcgi_buffer_size</span> <span class="hljs-string">64k;</span><br>    <span class="hljs-attr">fastcgi_buffers</span> <span class="hljs-string">4 64k;</span><br>    <span class="hljs-attr">fastcgi_busy_buffers_size</span> <span class="hljs-string">128k;</span><br>    <span class="hljs-attr">fastcgi_temp_file_write_size</span> <span class="hljs-string">128k;</span><br>    <br><span class="hljs-comment">    #gzip模块设置</span><br>    <span class="hljs-attr">gzip</span> <span class="hljs-string">on; #开启gzip压缩输出</span><br>    <span class="hljs-attr">gzip_min_length</span> <span class="hljs-string">1k;    #最小压缩文件大小</span><br>    <span class="hljs-attr">gzip_buffers</span> <span class="hljs-string">4 16k;    #压缩缓冲区</span><br>    <span class="hljs-attr">gzip_http_version</span> <span class="hljs-string">1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br>    <span class="hljs-attr">gzip_comp_level</span> <span class="hljs-string">2;     #压缩等级</span><br>    <span class="hljs-attr">gzip_types</span> <span class="hljs-string">text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br>    <span class="hljs-attr">gzip_vary</span> <span class="hljs-string">on;</span><br><br><span class="hljs-comment">    #开启限制IP连接数的时候需要使用</span><br><span class="hljs-comment">    #limit_zone crawler $binary_remote_addr 10m;</span><br>    <br>    <br><span class="hljs-comment">    #负载均衡配置</span><br>    <span class="hljs-attr">upstream</span> <span class="hljs-string">piao.jd.com &#123;</span><br>     <br><span class="hljs-comment">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.121:80 weight=3;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.122:80 weight=2;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.80.123:80 weight=3;</span><br><br><span class="hljs-comment">        #nginx的upstream目前支持4种方式的分配</span><br><span class="hljs-comment">        #1、轮询（默认）</span><br><span class="hljs-comment">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="hljs-comment">        #2、weight</span><br><span class="hljs-comment">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="hljs-comment">        #例如：</span><br><span class="hljs-comment">        #upstream bakend &#123;</span><br><span class="hljs-comment">        #    server 192.168.0.14 weight=10;</span><br><span class="hljs-comment">        #    server 192.168.0.15 weight=10;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #2、ip_hash</span><br><span class="hljs-comment">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="hljs-comment">        #例如：</span><br><span class="hljs-comment">        #upstream bakend &#123;</span><br><span class="hljs-comment">        #    ip_hash;</span><br><span class="hljs-comment">        #    server 192.168.0.14:88;</span><br><span class="hljs-comment">        #    server 192.168.0.15:80;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #3、fair（第三方）</span><br><span class="hljs-comment">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="hljs-comment">        #upstream backend &#123;</span><br><span class="hljs-comment">        #    server server1;</span><br><span class="hljs-comment">        #    server server2;</span><br><span class="hljs-comment">        #    fair;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #4、url_hash（第三方）</span><br><span class="hljs-comment">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="hljs-comment">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="hljs-comment">        #upstream backend &#123;</span><br><span class="hljs-comment">        #    server squid1:3128;</span><br><span class="hljs-comment">        #    server squid2:3128;</span><br><span class="hljs-comment">        #    hash $request_uri;</span><br><span class="hljs-comment">        #    hash_method crc32;</span><br><span class="hljs-comment">        #&#125;</span><br><br><span class="hljs-comment">        #tips:</span><br><span class="hljs-comment">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="hljs-comment">        #    ip_hash;</span><br><span class="hljs-comment">        #    server 127.0.0.1:9090 down;</span><br><span class="hljs-comment">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="hljs-comment">        #    server 127.0.0.1:6060;</span><br><span class="hljs-comment">        #    server 127.0.0.1:7070 backup;</span><br><span class="hljs-comment">        #&#125;</span><br><span class="hljs-comment">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><br><span class="hljs-comment">        #每个设备的状态设置为:</span><br><span class="hljs-comment">        #1.down表示单前的server暂时不参与负载</span><br><span class="hljs-comment">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="hljs-comment">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="hljs-comment">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="hljs-comment">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><br><span class="hljs-comment">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="hljs-comment">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="hljs-comment">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="hljs-comment">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br>    <span class="hljs-attr">&#125;</span><br>    <br>    <br><span class="hljs-comment">    #虚拟主机的配置</span><br>    <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">        #监听端口</span><br>        <span class="hljs-attr">listen</span> <span class="hljs-string">80;</span><br><br><span class="hljs-comment">        #域名可以有多个，用空格隔开</span><br>        <span class="hljs-attr">server_name</span> <span class="hljs-string">www.jd.com jd.com;</span><br><span class="hljs-comment">        #默认入口文件名称</span><br>        <span class="hljs-attr">index</span> <span class="hljs-string">index.html index.htm index.php;</span><br>        <span class="hljs-attr">root</span> <span class="hljs-string">/data/www/jd;</span><br><br><span class="hljs-comment">        #对******进行负载均衡</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(php|php5)?$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">fastcgi_pass</span> <span class="hljs-string">127.0.0.1:9000;</span><br>            <span class="hljs-attr">fastcgi_index</span> <span class="hljs-string">index.php;</span><br>            <span class="hljs-attr">include</span> <span class="hljs-string">fastcgi.conf;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #图片缓存时间设置</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">expires</span> <span class="hljs-string">10d;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #JS和CSS缓存时间设置</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .*.(js|css)?$</span><br>        <span class="hljs-attr">&#123;</span><br>            <span class="hljs-attr">expires</span> <span class="hljs-string">1h;</span><br>        <span class="hljs-attr">&#125;</span><br>         <br><span class="hljs-comment">        #日志格式设定</span><br><span class="hljs-comment">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="hljs-comment">        #$remote_user：用来记录客户端用户名称；</span><br><span class="hljs-comment">        #$time_local： 用来记录访问时间与时区；</span><br><span class="hljs-comment">        #$request： 用来记录请求的url与http协议；</span><br><span class="hljs-comment">        #$status： 用来记录请求状态；成功是200，</span><br><span class="hljs-comment">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="hljs-comment">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="hljs-comment">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="hljs-comment">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br>        <span class="hljs-attr">log_format</span> <span class="hljs-string">access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>        <span class="hljs-meta">&#x27;$status</span> <span class="hljs-string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>        <span class="hljs-meta">&#x27;&quot;$http_user_agent&quot;</span> <span class="hljs-string">$http_x_forwarded_for&#x27;;</span><br>         <br><span class="hljs-comment">        #定义本虚拟主机的访问日志</span><br>        <span class="hljs-attr">access_log</span>  <span class="hljs-string">/usr/local/nginx/logs/host.access.log  main;</span><br>        <span class="hljs-attr">access_log</span>  <span class="hljs-string">/usr/local/nginx/logs/host.access.404.log  log404;</span><br>         <br><span class="hljs-comment">        #对 &quot;/connect-controller&quot; 启用反向代理</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/connect-controller &#123;</span><br>            <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://127.0.0.1:88; #请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span><br>            <span class="hljs-attr">proxy_redirect</span> <span class="hljs-string">off;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-IP $remote_addr;</span><br>             <br><span class="hljs-comment">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>             <br><span class="hljs-comment">            #以下是一些反向代理的配置，可选。</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br><br><span class="hljs-comment">            #允许客户端请求的最大单文件字节数</span><br>            <span class="hljs-attr">client_max_body_size</span> <span class="hljs-string">10m;</span><br><br><span class="hljs-comment">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="hljs-comment">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="hljs-comment">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br>            <span class="hljs-attr">client_body_buffer_size</span> <span class="hljs-string">128k;</span><br><br><span class="hljs-comment">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br>            <span class="hljs-attr">proxy_intercept_errors</span> <span class="hljs-string">on;</span><br><br><span class="hljs-comment">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="hljs-comment">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br>            <span class="hljs-attr">proxy_connect_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="hljs-comment">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br>            <span class="hljs-attr">proxy_send_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="hljs-comment">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br>            <span class="hljs-attr">proxy_read_timeout</span> <span class="hljs-string">90;</span><br><br><span class="hljs-comment">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="hljs-comment">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br>            <span class="hljs-attr">proxy_buffer_size</span> <span class="hljs-string">4k;</span><br><br><span class="hljs-comment">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="hljs-comment">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br>            <span class="hljs-attr">proxy_buffers</span> <span class="hljs-string">4 32k;</span><br><br><span class="hljs-comment">            #高负荷下缓冲大小（proxy_buffers*2）</span><br>            <span class="hljs-attr">proxy_busy_buffers_size</span> <span class="hljs-string">64k;</span><br><br><span class="hljs-comment">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="hljs-comment">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br>            <span class="hljs-attr">proxy_temp_file_write_size</span> <span class="hljs-string">64k;</span><br>        <span class="hljs-attr">&#125;</span><br>        <br><span class="hljs-comment">        #本地动静分离反向代理配置</span><br><span class="hljs-comment">        #所有jsp的页面均交由tomcat或resin处理</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">~ .(jsp|jspx|do)?$ &#123;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-IP $remote_addr;</span><br>            <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>            <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://127.0.0.1:8080;</span><br>        <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置）。</p><p>main 部分设置的指令影响其他所有部分的设置；</p><p>server 部分的指令主要用于制定虚拟主机域名、IP 和端口号；</p><p>upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p><p>location 部分用于匹配网页位置（比如，根目录“/”，“/images”，等等）。</p><p>他们之间的关系：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/21/hello-world/"/>
    <url>/2021/02/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
